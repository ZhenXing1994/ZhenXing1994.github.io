{"meta":{"title":"ZhenXing Blog","subtitle":"看山是山，看山不是山，看山还是山","description":"个人博客","author":"ZhenXing","url":"http://zhenxingblog.site","root":"/"},"pages":[{"title":"","date":"2021-02-13T03:47:54.332Z","updated":"2021-02-13T03:47:54.332Z","comments":true,"path":"404.html","permalink":"http://zhenxingblog.site/404.html","excerpt":"","text":"+layout: false +--- 404"},{"title":"文章分类","date":"2021-02-13T03:45:22.000Z","updated":"2021-02-26T13:37:32.872Z","comments":false,"path":"categories/index.html","permalink":"http://zhenxingblog.site/categories/index.html","excerpt":"","text":""},{"title":"个人简介","date":"2021-02-13T03:42:56.000Z","updated":"2021-02-26T13:43:46.591Z","comments":true,"path":"about/index.html","permalink":"http://zhenxingblog.site/about/index.html","excerpt":"","text":""},{"title":"read","date":"2021-02-26T13:54:42.000Z","updated":"2021-02-26T14:23:50.606Z","comments":false,"path":"reads/index.html","permalink":"http://zhenxingblog.site/reads/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-02-13T03:44:36.000Z","updated":"2021-02-26T13:57:37.149Z","comments":false,"path":"tags/index.html","permalink":"http://zhenxingblog.site/tags/index.html","excerpt":"","text":""},{"title":"tools","date":"2021-02-26T13:54:15.000Z","updated":"2021-02-26T13:57:48.182Z","comments":false,"path":"tools/index.html","permalink":"http://zhenxingblog.site/tools/index.html","excerpt":"","text":""},{"title":"","date":"2021-02-26T13:58:02.868Z","updated":"2021-02-26T13:58:02.868Z","comments":true,"path":"top/index.html","permalink":"http://zhenxingblog.site/top/index.html","excerpt":"","text":"AV.initialize(\"UqFccNjTsgx8NWlp14IDF1a7-gzGzoHsz\", \"d7nskRS7X1aPlkfi4SpmcaMx\"); var time=0 var title=\"\" var url=\"\" var query = new AV.Query('Counter'); query.notEqualTo('id',0); query.descending('time'); query.limit(1000); query.find().then(function (todo) { for (var i=0;i"}],"posts":[{"title":"Hello World","slug":"Hexo/hello-world","date":"2021-06-29T03:08:55.249Z","updated":"2021-02-26T13:26:54.827Z","comments":true,"path":"posts/4a17b156/","link":"","permalink":"http://zhenxingblog.site/posts/4a17b156/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 图片 代码块1234567#include &lt;iostream&gt;using namespace std;int main(int argc,char** argv)&#123; cout&lt;&lt;&quot;Hello World&quot;&lt;&lt;endl;&#125;","categories":[{"name":"markdown","slug":"markdown","permalink":"http://zhenxingblog.site/categories/markdown/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://zhenxingblog.site/tags/markdown/"}]},{"title":"FM4时钟单元","slug":"FM4/FM4时钟单元","date":"2021-06-11T11:46:28.000Z","updated":"2021-06-13T12:06:08.913Z","comments":true,"path":"posts/undefined/","link":"","permalink":"http://zhenxingblog.site/posts/undefined/","excerpt":"FM4单片机时钟介绍","text":"FM4单片机时钟介绍 1.时钟产生单元 5种时钟源 Main Clock (CLKMO) Sub Clock (CLKSO) High-speed CR Clock (CLKHC) Low-speed CR Clock (CLKLC) Main PLL Clock (CLKPLL) 可从上述时钟源种选择一种作为master clock,作为内部总线时钟用于MCU通过对master clock分频,产生一个base clock,对base clock分频产生内部总线时钟。 Master Clock - Interal Bus Clock Div=&gt; Base Clock - Interal Bus Clock Div=&gt; Clocks - Interal Bus Clock 5种内部总线时钟 Base Clock (FCLK/HCLK) APB0 Clock (PCLK0) APB1 Clock (PCLK1) APB2 Clock (PCLK2) TRACE Clock (TPIUCLK) 除此之外，以下外设在使用时，也要提供时钟 USB Clock USB/Ethernet Clock CAN prescaler Clock I2S Clock GDC Clock Software watchdog timer count clock 时钟产生单元特性 可以设置Main Clock稳定周期 可以设置Main Clock稳定中断事件 可以设置Sub Clock稳定周期 可以设置Sub Clock稳定中断事件 可以设置PLL Clock稳定周期 可以设置PLL Clock稳定中断事件 可以设置PLL倍频 可以选择master clock 可以设置内部时钟总线的内部分频 可以运行/停止APB1 和 APB2总线时钟 看门狗定时器时钟(WDT)可以分频 可以停止/运行WDT 在debug模式下,可以设置WDT计数操作 1.1 时钟源 - Master Clock 可以选择其中一个作为时钟源 1.Main Clock 由外部引脚X0,X1提供时钟 2.Sub Clock 由外部引脚X0A,X1A提供 3.High-speed CR Clock 高速CR振荡时钟 4.Low-speed CR Clock 低速CR振荡时钟 5.PLL Clock 由Main Clock/High-speed CR Clock倍频获得 1.2 内部总线时钟 1.Base Clock (FCLK/HCLK 直接作用于CPU) HCLK直接作用于AHB总线时钟 Base Clock = MasterClock/1 or MasterClock/16 在定时器模式，RTC模式，停机模式，深度待机RTC模式以及深度待机停止模式,Base Clock停止 在睡眠模式下，CPU停止HCLK，但FCLK继续使用 2.APB0总线时钟(PCLK0) PCLK0 = Base Clock/1 or Base Clock/8 在定时器模式，RTC模式，停机模式，深度待机RTC模式以及深度待机停止模式,PCLK0停止 2.APB1总线时钟(PCLK1) PCLK1 = Base Clock/1 or Base Clock/8 在定时器模式，RTC模式，停机模式，深度待机RTC模式以及深度待机停止模式,PCLK1停止 该总线时钟可以使用寄存器停止运行 3.APB2总线时钟 同 APB1 4.TPIU Clock 同APB0(只有代ETM的产品才能使能该时钟) 1.3其他时钟源 1.USB时钟 产生48MHz时钟，通过PLL-&gt;USBCLK 在定时器模式，RTC模式，停机模式，深度待机RTC模式以及深度待机停止模式,USB时钟停止 该时钟独立于Master Clock 2.USB/Ethernet Clock 同上 3.CAN prescaler Clock 该时钟与PLL一致 通过配置presaler一侧，实现分频 在RTC模式、停机模式、深度待机RTC模式、深度待机停机模式下停止使用 通过寄存器可以停止该时钟 4.I2S prescaler Clock 由PLL提供 在定时器模式、RTC模式、停机模式、深度待机RTC模式、深度待机停机模式下停止使用 可以独立设置时钟 5.GDC prescler Clock 由PLL提供 在定时器模式、RTC模式、停机模式、深度待机RTC模式、深度待机停机模式下停止使用 可以独立设置时钟 6.WDT Clock 该时钟与APB0相连 WDTClk = APB0/1 or APB0/8 在定时器模式、RTC模式、停机模式、深度待机RTC模式、深度待机停机模式下停止使用 1.3时钟树 [注] *2. PSW_TMR:PINC 为PLL输入时钟选择位 *3. SCM_CTL:RCS[2:0] Master Clock选择位 2.PLL作为主时钟设置2.1时钟选择1.设置 System Clock Mode Control Register (SCM_CTL)中SOSCE位，旁路CLKSO 2.2 PLL设置1.设置PLL时钟振荡启动稳定时间寄存器(PLL Clock Oscillation Stabilization Wait Time Setup Register)PSW_TMR 选择PLL输入时钟 设置PLL稳定时长 通过设置PLL Control Register 1(PLL_CTL1) 和 PLL Control Register 2 (PLL_CTL2)，配置PLLCLK InputClk K PLLIn N PLLout M CLKPLL 4MHz 1 4MHz 40 320MHz 2 160MHz 8MHz 1 8MHz 20 320MHz 2 160MHz 2.设置System Clock Mode Control Register (SCM_CTL) 的PLLE位,使能PLL振荡 3.通过System Clock Mode Status Register (SCM_STR) 的PLL oscillation stable状态位，判断PLL是否完成 4.设置System Clock Mode Control Register(SCM_CTL)的RCS[2:0]=010,将其作为Master Clock的输入 2.4 分频设置主要设置 Base Clock Prescaler Register (BSC_PSR), APB0 Prescaler Register (APBC0_PSR), APB1 Prescaler Register (APBC1_PSR), APB2Prescaler Register (APBC2_PSR), and Trace Clock Prescaler Register (TTC_PSR). 2.5与时钟相关的中断 4种中断类型 FCS (anomalous frequency detection) interrupt Main PLL clock oscillation stabilization wait completion interrupt Sub clock oscillation stabilization wait completion interrupt Main clock oscillation stabilization wait completion interrupt 中断相关寄存器 Interrupt Enable Register (INT_ENR) Interrupt Status Register (INT_STR) read-only Interrupt Clear Register (INT_CLR) write-only 3.配置流程High-speed CR Run Mode -&gt; Desired Clock Mode 配置步骤 Step1.使用High-Speed CR 时钟 1.1 等待内部High-Speed CR 振荡稳定:系统上电后默认时钟 1.2 进行BusClock分频 1.3 使用INT_CLR清除所有中断标志位Step2.由High-Speed CR 时钟切换至MainCLK 2.1 设置CSW_TMR寄存器中的振荡延时 2.2 使能振荡稳定中断INT_ENT ??? 这应该不需要 2.3 使能MainCLK SCM_CTL:MOSCE=1 作为Master CLK 2.4 等待MainCLK振荡稳定标志位SCM_STR:MORDY=1 Step3.由MainCLK切换至PLLCLK 3.1 设置内部PLL振荡稳定时间 3.2 设置PLL输入时钟 3.3 设置PLL振荡稳定中断 ??? 这应该不需要 3.4 通过设置PLL_CTL1,PLL_CTL2设置倍频系数 3.5 使能PLL（SCM_CTL:PLLE=1）3.6 确认PLL振荡状态标志位:SCM_STR:PLRDY Step4.设置Master Clock输入 4.1 设置SCM_CTL:RCS设置相应的时钟模式 4.2 SCM:STR:RCM == SCM_CTL:RCS 正在切换 12345678910111213141516171819202122232425262728293031323334353637383940static void bsp_PLLInit(void)&#123; uint32_t tmp; // Step1.使用High-Speed CR 时钟 // 1.1 等待内部High-Speed CR 振荡稳定:系统上电后默认时钟// 1.2 进行BusClock分频 &lt;br/&gt;// 1.3 使使用INT_CLR清除所有中断标志位&lt;br/&gt; FM4_CRG-&gt;INT_CLR |=0x07; // Step2.由High-Speed CR 时钟切换至MainCLK tmp = FM4_CRG-&gt;CSW_TMR &amp; ~0x0f; FM4_CRG-&gt;CSW_TMR = tmp|0x0b; // 20.96s //FM4_CRG-&gt;INT_ENR |= 0x01; // 使能MainCLK中断 FM4_CRG-&gt;SCM_CTL |= 0x01&lt;&lt;1; // Enable Main CLK while(~FM4_CRG-&gt;SCM_STR&amp;(0x01&lt;&lt;1));//SCM_STR:MORDY // Step3.由MainCLK切换至PLLCLK tmp = FM4_CRG-&gt;PSW_TMR &amp; ~(0x01&lt;&lt;4|0x07); FM4_CRG-&gt;PSW_TMR = tmp|0x07; // 16.40 PLLin = MainClk tmp = FM4_CRG-&gt;PLL_CTL1 &amp; ~0xff; FM4_CRG-&gt;PLL_CTL1 = tmp|0x01; // K=1 M=2 tmp = FM4_CRG-&gt;PLL_CTL2 &amp; ~0xff; FM4_CRG-&gt;PLL_CTL2 = tmp|39; // N=39 FM4_CRG-&gt;SCM_CTL |= 0x01&lt;&lt;4; // Enable PLL CLK while(~FM4_CRG-&gt;SCM_STR&amp;(0x01&lt;&lt;4)); // Step4.设置PLL为Master Clock输入 tmp = FM4_CRG-&gt;SCM_CTL &amp; ~(0x07&lt;&lt;5); FM4_CRG-&gt;SCM_CTL = tmp|(0x02&lt;&lt;5); // Workaround for preventing MISRA C:1998 Rule 46 (MISRA C:2004 Rule 12.2) // violations: // &quot;Unordered reads and writes to or from same location&quot; and // &quot;Unordered accesses to a volatile location&quot; while((FM4_CRG-&gt;SCM_STR&amp;(0x02&lt;&lt;5)));&#125; 执行前，替换系统的SystemInit() 系统不断复位 —&gt;&gt;&gt; 对比SystemInit;发现需要进行关看门狗;此外由于SystemInit()已实现160MHz配置，无需进行时钟设置 12345#if (HWWD_DISABLE) /* HW Watchdog Disable */ FM4_HWWDT-&gt;WDG_LCK = 0x1ACCE551u; /* HW Watchdog Unlock */ FM4_HWWDT-&gt;WDG_LCK = 0xE5331AAEu; FM4_HWWDT-&gt;WDG_CTL = 0u; /* HW Watchdog stop */#endif","categories":[{"name":"FM4","slug":"FM4","permalink":"http://zhenxingblog.site/categories/FM4/"}],"tags":[{"name":"ARM","slug":"ARM","permalink":"http://zhenxingblog.site/tags/ARM/"},{"name":"Cortex-M4","slug":"Cortex-M4","permalink":"http://zhenxingblog.site/tags/Cortex-M4/"}]},{"title":"Unity3D物理引擎","slug":"Unity3D/Unity3D物理引擎","date":"2021-05-28T11:07:10.000Z","updated":"2021-06-29T03:46:07.667Z","comments":true,"path":"posts/undefined/","link":"","permalink":"http://zhenxingblog.site/posts/undefined/","excerpt":"使得模型具备物理特性","text":"使得模型具备物理特性 1.刚体Rigidbody实现模型对象物理行为的主要组件，即受力的作用 刚体睡眠: 刚体移动速率低于规定的最小线性速度或转速时，物理引擎认为刚体已停止移动。当再次受到力的作用，才会被唤醒，或者使用Rigidbody的WakeUp()唤醒 作用力: 给刚体一个加速度 使用方式: a.使用Constant Forece恒定力组件 b.脚本调用AddForce() 扭矩: 给刚体一个旋转作用 使用方式: 脚本调用AddTorque() ** Rigidbody的运动方式与Transform的变换方式各自独立 ** 配置参数 序号 参数名 描述 1 Mass 质量 2 Drag 阻力（运动方向上的） 3 Angular Drag 扭矩阻力 4 Use Gravity 是否使用重力 5 Is Kinematic 若启用，模型不受物理引擎驱动，不受碰撞力作用，但仍能检测碰撞使劲按 6 Interpolate 根据前一帧变换来平滑变换(仅当刚体运动中发生急动时,才启动的选项) 7 Extrapolate 根据下一帧变换来平滑变换(仅当刚体运动中发生急动时,才启动的选项) 8 Discrete(Collision Detection) 正常碰撞情况 9 Continuous(Collision Detection) 连续碰撞检测 10 Continuous Dynamic(Collision Detection) 连续动态碰撞检测 11 Continuous Speculative(Collision Detection) 推测性连续碰撞检测 12 Freeze Position(Constraints 运动限制) 位置锁定 13 Freeze Rotation(Constraints 运动限制) 旋转锁定 2.作用力Force Constant Force 序号 参数名 描述 1 Force(X,Y,Z) 世界坐标X,Y,Z三轴方向上的矢量力 2 Relative Force(X,Y,Z) 自身坐标系X,Y,Z三轴方向上的矢量力 3 Torque 世界坐标系三轴上的矢量扭矩 3 Relative Torque 自身坐标系三轴上的矢量扭矩 3.碰撞体Collider &amp; 触发器 Trigger4.物理材质Physic Material5.物体之间的物理碰撞/触发，碰撞/触发事件检测6.Character Controller 角色控制器7.Cloth布料8.Joint关节","categories":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://zhenxingblog.site/categories/Unity3D/"}],"tags":[{"name":"3D","slug":"3D","permalink":"http://zhenxingblog.site/tags/3D/"},{"name":"物理引擎","slug":"物理引擎","permalink":"http://zhenxingblog.site/tags/%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/"}]},{"title":"Trilib插件使用","slug":"Unity3D/Trilib插件使用","date":"2021-05-24T08:49:03.000Z","updated":"2021-05-24T10:00:09.881Z","comments":true,"path":"posts/undefined/","link":"","permalink":"http://zhenxingblog.site/posts/undefined/","excerpt":"Trilib插件为Unity3D的付费插件，可实现Unity程序运行状态下，从程序外部动态加载数模。支持FBX, OBJ, GLTF2, STL, PLY, 3MF以及ZIP等文件。","text":"Trilib插件为Unity3D的付费插件，可实现Unity程序运行状态下，从程序外部动态加载数模。支持FBX, OBJ, GLTF2, STL, PLY, 3MF以及ZIP等文件。 1.安装&amp;编译 下载“TriLib - Model loader package.unitypackage”插件包，并使Unity3D导入插件; 编译运行时报错:TriLibConfigurePlugin.cs报错:没有”BuildTarget.Lumis”值,将其改为”BuildTarget.StandaloneWindows”，即可编译通过; 运行TriLib自带的AssetLoader场景，效果如下: 2.源码分析2.1 Sample.cs进行修改使用assetLoader类之间进行动态加载 1234567891011121314151617181920public void LoadFBXClick() &#123; string fbxPath = @&quot;C:\\Users\\Administrator\\Documents\\ABB\\J4.FBX&quot;; using (var assetLoader = new AssetLoader()) &#123; try &#123; var assetLoaderOptions = AssetLoaderOptions.CreateInstance(); assetLoaderOptions.RotationAngles = new Vector3(90f, 180f, 0f); assetLoaderOptions.AutoPlayAnimations = true; assetLoaderOptions.UseOriginalPositionRotationAndScale = true; var loadedGameObject = assetLoader.LoadFromFile(fbxPath, assetLoaderOptions); loadedGameObject.transform.position = new Vector3(128f, 0f, 0f); &#125; catch (Exception e) &#123; Debug.LogError(e.ToString()); &#125; &#125; &#125; 通过查看AssetLoaderWindow.cs，发现主要实现AssetLoader类调用 2.2 AssetLoaderWindow.cs中LoadInternal1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768/// &lt;summary&gt;/// Loads a model from the given filename, fibytes or browser files./// &lt;/summary&gt;/// &lt;param name=&quot;filename&quot;&gt;Model filename.&lt;/param&gt;/// &lt;param name=&quot;fileBytes&quot;&gt;Model file bytes.&lt;/param&gt;/// &lt;param name=&quot;browserFilesCount&quot;&gt;Browser filcount.&lt;/param&gt;private void LoadInternal(string filename, byte[] fileBytes = null, int browserFilesCount = -1)&#123; PreLoadSetup(); var assetLoaderOptions = GetAssetLoaderOptions(); if (!Async) &#123; using (var assetLoader = new AssetLoader()) &#123; assetLoader.OnMetadataProcessed AssetLoader_OnMetadataProcessed; try &#123; if (fileBytes != null &amp;&amp; fileBytes.Length &gt; 0) &#123; _rootGameObject = assetLoader.LoadFromMemoryWithTextures(fileBytes, FileUtils.GetFileExtension(filename), assetLoaderOptions, _rootGameObject); &#125;else if (!string.IsNullOrEmpty(filename)) &#123; _rootGameObject = assetLoader.LoadFromFileWithTextures(filename, assetLoaderOptions); &#125;else &#123; throw new Exception(&quot;File not selected&quot;); &#125; CheckForValidModel(assetLoader); &#125;catch (Exception exception) &#123; HandleException(exception); &#125; &#125; FullPostLoadSetup(); &#125;else &#123; using (var assetLoader = new AssetLoaderAsync()) &#123; assetLoader.OnMetadataProcessed += AssetLoader_OnMetadataProcessed; try&#123; if (fileBytes != null &amp;&amp; fileBytes.Length &gt; 0) &#123; assetLoader.LoadFromMemoryWithTextures(fileBytes, FileUtils.GetFileExtension(filename), assetLoaderOptions, null, delegate (GameObject loadedGameObject) &#123; CheckForValidModel(assetLoader); _rootGameObject = loadedGameObject; FullPostLoadSetup(); &#125;); &#125;else if (!string.IsNullOrEmpty(filename)) &#123; assetLoader.LoadFromFileWithTextures(filename, assetLoaderOptions, null, delegate (GameObject loadedGameObject) &#123; CheckForValidModel(assetLoader); _rootGameObject = loadedGameObject; FullPostLoadSetup(); &#125;); &#125;else&#123; throw new Exception(&quot;File not selected&quot;); &#125; &#125;catch (Exception exception) &#123; HandleException(exception); &#125; &#125; &#125;&#125; 2.3 从文件夹一次性加载多个文件1234public void LoadFromBrowserFiles(int filesCount)&#123; LoadInternal(null, null, filesCount);&#125; 3 修改Sample.cs代码，实现FBX动态加载通过取消加载的位姿配置操作，可实现FBX模型初始化装配坐标配置 12345678910111213141516171819202122232425262728293031323334353637383940public List&lt;GameObject&gt; gameObjects = new List&lt;GameObject&gt;();public GameObject DynamicLoadModel(string fbxPath)&#123; GameObject result = null; using (var assetLoader = new AssetLoader()) &#123; try &#123; var assetLoaderOptions = AssetLoaderOptions.CreateInstance(); assetLoaderOptions.AutoPlayAnimations = true; assetLoaderOptions.UseOriginalPositionRotationAndScale = true; var loadedGameObject = assetLoader.LoadFromFile(fbxPath, assetLoaderOptions); result = loadedGameObject as GameObject; &#125; catch (Exception e) &#123; Debug.LogError(e.ToString()); &#125; &#125; return result;&#125;public void LoadFBXClick()&#123; string basePath = @&quot;C:\\Users\\Administrator\\Documents\\SFB\\Resource\\ABB\\base.FBX&quot;; string fbxPath1 = @&quot;C:\\Users\\Administrator\\Documents\\SFB\\Resource\\ABB\\J1.FBX&quot;; string fbxPath2 = @&quot;C:\\Users\\Administrator\\Documents\\SFB\\Resource\\ABB\\J2.FBX&quot;; string fbxPath3 = @&quot;C:\\Users\\Administrator\\Documents\\SFB\\Resource\\ABB\\J3.FBX&quot;; string fbxPath4 = @&quot;C:\\Users\\Administrator\\Documents\\SFB\\Resource\\ABB\\J4.FBX&quot;; string fbxPath5 = @&quot;C:\\Users\\Administrator\\Documents\\SFB\\Resource\\ABB\\J5.FBX&quot;; string fbxPath6 = @&quot;C:\\Users\\Administrator\\Documents\\SFB\\Resource\\ABB\\J6.FBX&quot;; gameObjects.Add(this.DynamicLoadModel(basePath)); gameObjects.Add(this.DynamicLoadModel(fbxPath1)); gameObjects.Add(this.DynamicLoadModel(fbxPath2)); gameObjects.Add(this.DynamicLoadModel(fbxPath3)); gameObjects.Add(this.DynamicLoadModel(fbxPath4)); gameObjects.Add(this.DynamicLoadModel(fbxPath5)); gameObjects.Add(this.DynamicLoadModel(fbxPath6));&#125; 效果","categories":[{"name":"Unity3D","slug":"Unity3D","permalink":"http://zhenxingblog.site/categories/Unity3D/"}],"tags":[{"name":"3D","slug":"3D","permalink":"http://zhenxingblog.site/tags/3D/"},{"name":"FBX模型动态加载","slug":"FBX模型动态加载","permalink":"http://zhenxingblog.site/tags/FBX%E6%A8%A1%E5%9E%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"}]},{"title":"开关电源","slug":"Hardware/开关电源","date":"2021-05-20T08:27:17.000Z","updated":"2021-05-21T08:48:07.583Z","comments":true,"path":"posts/24b120d3/","link":"","permalink":"http://zhenxingblog.site/posts/24b120d3/","excerpt":"开关电源设计介绍","text":"开关电源设计介绍 1.Buck &amp; Boost 降压 &amp; 升压电路1.1 工作原理图 Buck降压原理图 \\[{V_{out}} = {V_{in}}*\\frac{{{T_{on}}}}{T}\\] Boost升压原理图 \\[{U_o} = {U_i}/(1 - \\frac{{{T_{on}}}}{{{T_{on}} + {T_{off}}}})\\] Buck-Boost 降压-升压原理图 \\[{U_o} = {U_i}*\\frac{{T_{on}^1}}{{T_{on}^1 + T_{off}^1}}/(1 - \\frac{{T_{on}^2}}{{T_{on}^2 + T_{off}^2}})\\] 1.2 开关电源的基本元件 1.电子开关 三极管/IGBT/NMOS,以后趋势:NMOS 内置NMOS:Iout&lt;5A 外置NMOS:NMOS可并联使用，从而提高电流 2.二极管 注意二极管开关频率，要高于Buck/Boost的开关频率 肖特基二极管 快恢复/超快恢复二极管 推荐: 1A/40V: 1N5819 3A/40V: 1N5822 MBR340 SK34 30WQ04 31DQ04 SR304 5A/40V: 1N5825 SR504 SB540 50WQ04 8A/40V: SR840 16A/40V: SR1640 3.电感 选择屏蔽电感 直流电阻DCR:采用DCR较小的电感 通流能力Irms 饱和电流Isat 电流需满足:I&lt;0.8*MAX(Irms,Isat) 4.电容 输入电容: 电解电容并上0.1uF电容 输出电容: 希望ESR较小,使用MLCC X7R 固态电容 (钽电容 耐压最是3倍的输出) 并上 0.1uF电容 1.3 芯片推荐 LM2596/LM2576 ￥1 输入电压: Max 40V 输出电压: 1.2~37V 输出电流: Max 3A 开关频率: 150KHz (频率越高，效率越高) MC34063A/MC33063 ￥0.2 （支持升压/降压开关稳压芯片） 输入电压: 2.5~40V 输出电压: 1.25~40V 输出电流: Max 1.5A 开关频率: 100KHz (频率越高，效率越高)","categories":[{"name":"Hardware","slug":"Hardware","permalink":"http://zhenxingblog.site/categories/Hardware/"}],"tags":[{"name":"开关电源","slug":"开关电源","permalink":"http://zhenxingblog.site/tags/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"name":"Buck","slug":"Buck","permalink":"http://zhenxingblog.site/tags/Buck/"},{"name":"Boost","slug":"Boost","permalink":"http://zhenxingblog.site/tags/Boost/"}]},{"title":"Qt项目配置文件pro和pri介绍","slug":"Qt/Qt项目配置文件pro和pri介绍","date":"2021-05-08T02:55:31.000Z","updated":"2021-05-20T08:32:43.930Z","comments":true,"path":"posts/e6f2032/","link":"","permalink":"http://zhenxingblog.site/posts/e6f2032/","excerpt":"QT工程管理文件配置介绍","text":"QT工程管理文件配置介绍 1.pro文件配置123456789101112131415161718192021TEMPLATE = app # app:生成exe可执行文件 lib:生成dll库LANGUAGE = C++ # 使用C++开发QT += widgets # 添加QT控件库CONFIG += console # 使能打印终端TARGET = appName # exe的文件名HEADERS += h1.hpp \\ h2.hpp # 添加头文件SOURCE += h1.cpp \\ h2.cpp # 添加源文件FORMS += dialog.ui # 添加ui文件DESETDIR = ../../../bin # 最终目标可执行文件的存放路径OBJECTS_DIR = ../../../obj # 程序生成的中间临时文件的存放路径MOC_DIR = ../../../obj/moc # moc命令编译生成临时文件的存放路径$$(path) # 使用环境变量$$LANGUAGE # 使用脚本变量var1=&#x27;$$LANGUAGE&#x27;_suffix # 变量名加后缀message(var1) # 打印信息 1.1 EXE or Dll 生成 – TEMPLATE 函数名 描述 TEMPLATE=app 本项目生成一个EXE TEMPLATE=lib 本项目生成一个dll TEMPLATE=subdirs 表示本项目将扫描指定的子目录合集，与SUBDIRS配合使用 1.2 使用C++开发语言 – LANGUAGELANGUAGE = C++ 1.3 生成目标文件名称 – TARGETTARGET = xxxx 根据TEMPLATE的设置会生成相应的xxxx.dll or xxxx.exe文件 1.4 debug 、 release or both – CONFIG CONFIG += aaa bbb ccc # 增加配置项 CONFIG -= aaa bbb ccc # 删除配置项 配置项取值 序号 配置值 描述 1 release 以发布版本构建项目 CONFIG+=release or 取消: CONFIG-=release 2 debug 以调试版本构建项目 CONFIG+=debug or 取消: CONFIG -= debug 3 debug_and_release 以debug和release两个版本进行构建 CONFIG+=debug_and_release 4 precompile_header 表示可以在项目中使用预编译头文件 CONFIG+=precompile_header 5 rtti 启用RTTI支持，关闭时使用rtti_off 6 stl 启用STL支持,关闭时使用stl_off 7 thread 表示支持多线程，当CONFIG取值中包含qt时使用,默认使用 8 warn_on 表示编译器尽可能的多输出报警信息 9 warn_off 表示编译器尽可能的少输出报警信息 10 qt 表示需要链接qt的类库，一般只在pro主文件中使用，否者一般在开发服务类应用库时，才会使用该配置 11 C++11 启用C++11支持 12 C++14 启用C++14支持 1.5 使用QT模块 – QT QT += xxx xxx xxx or QT -= xxx xxx 1.6 各种DIR和PATH的使用 序号 子项 描述 案例 1 INCLUDEPATH 描述构建项目时，使用的include目录如果包含UI资源，需要先配置UI_DIR路径，在将其添加到INCLUDEPATH中 INCLUDEPATH=$$(PROJECTHOME)/include UI_DIR=$$(PROJECTHOME)/obj/demo/dialog/uiINCLUDEPATH += UI_DIR 2 DESTDIR 项目生成dll或exe的路径 DESTDIR = $$(PROJECTHOME)/lib 3 MOC_DIR moc命令生成文件的存放目录 MOC_DIR = $$(PROJECTHOME)/obj/moc 4 OBJECTS_DIR 生成中间件的存放路径 OBJECTS_DIR = $$(PROJECTHOME)/obj 5 RCC_DIR qt资源编译生成路径 RCC_DIR = $$(PROJECTHOME)/obj/resources 6 UI_DIR 项目生成dll或exe的路径 UI_DIR = $$(PROJECTHOME)/obj/ui 1.7 FORMS使用用于描述项目中使用的UI文件 12FORMS &#x3D; dialog.ui \\ login.ui 1.8 添加头文件、源文件 – HEADERS SOURCES用于描述项目中用到的头(源)文件列表 123HEADERS &#x3D; abc.pro \\ animate&#x2F;files&#x2F;myfile.h \\ $$(PROJECTHOME)&#x2F;include&#x2F;base.h 1.9 添加资源 – RESOURCES用于描述项目使用的资源描述文件(*.qrc):RESOURCES += mdi.qrc 1.10 添加库文件 – LIBS -l:表示库文件名 LIBS += -lmycomm ‘-L’:表示库文件路径 当一个文件夹中包含多个lib文件时 123LIBS +&#x3D; -L&#x2F;usr&#x2F;local&#x2F;myprogram&#x2F;lib \\ -lmcomm \\ -lfesp 1.11 描述项目中用到的翻译文件 – TRANSLATIONS1TRANSLATIONS &#x3D; translations&#x2F;graphplatform_zh_CN.ts 2. pri配置文件1.关键字 序号 关键字 描述 案例 1 include 在pro中引入pri include(../base.pri) 2 unix/win32 用于定义在不同平台下构建项目时的配置 unix&#123; ... &#125;win32&#123; ... &#125; 3 DEFINES 在pri中定义宏 DEFINES *= xxxx 4 CONFIG 项目配置参数 CONFIG += xxxx 5 QMAKE_CXXFLAGS 配置编译标志 QMAKE_CXXFLAGS = -wd499 3.使用qmake生成VS2019的工程项目管理使用x64 Native Tools Command，进入源码pro目录,输入如下命令 1qmake -tp vc","categories":[{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"LED","slug":"LED","permalink":"http://zhenxingblog.site/tags/LED/"}]},{"title":"1.RobotArm坐标变换","slug":"机械臂/1-RobotArm坐标变换","date":"2021-05-06T09:09:31.000Z","updated":"2021-05-06T13:53:16.045Z","comments":true,"path":"posts/3be36776/","link":"","permalink":"http://zhenxingblog.site/posts/3be36776/","excerpt":"机械臂关节坐标变换介绍","text":"机械臂关节坐标变换介绍 1.介绍如果把机械臂每个关节看作一个空间坐标系，每个相邻坐标系之间以连杆相连，则必须建立两个连杆之间的描述，如下图所示。 假设机械臂有N个关节，则机械臂拥有N+1个连杆(基座为连杆0); 关节J+1的坐标系{j}的确立: 以上一关节J和关节J+1的旋转轴($z_{j-1}$和$z_j$)的法线作为{j}的x轴$x_j$ z轴、x轴确立，用右手定则确定y轴 DH模型参数确定 $x_{j-1}$与$x_j$的夹角为$\\theta_{j}$ 坐标系{j-1}原点与坐标系{j}原点投影到$z_{j-1}$轴上点的距离$d_j$ DH模型 机械臂建立数学模型（DH模型），需要对各个关节建立空间坐标系，并建立DH参数表 连杆号 $\\theta_j$ $d_j$ $a_j$ $\\alpha_j$ 连杆1 … … … … 连杆2 … … … … 连杆3 … … … … … … … … … 空间坐标-旋转平移公式 \\[^{j - 1}{A_j}({\\theta _j},{d_j},{\\alpha _j},{a_j}) = \\left[ {\\begin{array}{*{20}{c}}{\\cos {\\theta _j}}&{ - \\sin {\\theta _j}\\cos {\\alpha _j}}&{\\sin {\\theta _j}\\sin {\\alpha _j}}&{{a_j}\\cos {\\theta _j}}\\\\{\\sin {\\theta _j}}&{\\cos {\\theta _j}\\sin {\\alpha _j}}&{ - \\cos {\\theta _j}\\sin {\\alpha _j}}&{{a_j}\\sin {\\theta _j}}\\\\0&{\\sin {\\alpha _j}}&{\\cos {\\alpha _j}}&{{d_j}}\\\\0&0&0&1\\end{array}} \\right]\\]","categories":[{"name":"机器人学","slug":"机器人学","permalink":"http://zhenxingblog.site/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/"}],"tags":[{"name":"机械臂","slug":"机械臂","permalink":"http://zhenxingblog.site/tags/%E6%9C%BA%E6%A2%B0%E8%87%82/"},{"name":"坐标变换","slug":"坐标变换","permalink":"http://zhenxingblog.site/tags/%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/"}]},{"title":"JavaScript","slug":"WEB前端/JavaScript入门","date":"2021-03-23T12:44:03.000Z","updated":"2021-05-06T09:11:44.914Z","comments":true,"path":"posts/cc1b9611/","link":"","permalink":"http://zhenxingblog.site/posts/cc1b9611/","excerpt":"JavaScript脚本入门","text":"JavaScript脚本入门 1.JavaScript引入 内嵌式: 在HTML文档中,以标签引入 12&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt; 外联式: 在HTML文档中,通过标签引入 xxx.js文件 2.变量声明 命名规范: 必须以字母/下划线开头,中间可以是数字、字符或下划线 变量名不能包含空格等符号 不能使用JavaScript关键字作为变量名,如:function JavaScript严格区分大小写 变量声明 var 变量名 变量赋值 var 变量名 = 值 3.数据类型 Undefined类型只有一个值，即undefined(默认值) Null,只有一个专用值null,表示空 (undefined==null):true,但含义不同 Boolean:true或false Number:表示数字 String:字符串有&quot;或&#39;声明 Object:变量可以是一个引用类型或null 4.案例4.1 注册表单验证12345678910111213141516171819202122232425262728293031323334353637383940&lt;script&gt; function checkForm()&#123; //alert(&quot;aa&quot;); /**校验用户名*/ //1.获取用户输入的数据 var uValue = document.getElementById(&quot;user&quot;).value; //alert(uValue); if(uValue==&quot;&quot;)&#123; //2.给出错误提示信息 alert(&quot;用户名不能为空!&quot;); return false; &#125; /*校验密码*/ var pValue = document.getElementById(&quot;password&quot;).value; if(pValue==&quot;&quot;)&#123; alert(&quot;密码不能为空!&quot;); return false; &#125; /**校验确认密码*/ var rpValue = document.getElementById(&quot;repassword&quot;).value; if(rpValue!=pValue)&#123; alert(&quot;两次密码输入不一致!&quot;); return false; &#125; /*校验邮箱*/ var eValue = document.getElementById(&quot;eamil&quot;).value; if(!^/([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/.test(eValue))&#123; alert(&quot;邮箱格式不正确!&quot;); return false; &#125; &#125;&lt;/script&gt; &lt;form action=&quot;#&quot; method=&quot;get&quot; name=&quot;regForm&quot; onsubmit=&quot;return checkForm()&quot;&gt; ... &lt;/form&gt;","categories":[{"name":"WEB前端开发","slug":"WEB前端开发","permalink":"http://zhenxingblog.site/categories/WEB%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://zhenxingblog.site/tags/JavaScript/"}]},{"title":"电阻电容电感","slug":"Hardware/电阻电容电感","date":"2021-03-14T03:05:38.000Z","updated":"2021-06-29T03:29:58.035Z","comments":true,"path":"posts/fab98bd8/","link":"","permalink":"http://zhenxingblog.site/posts/fab98bd8/","excerpt":"电阻电容电感使用","text":"电阻电容电感使用 4.二极管作用4.1 防反接不建议使用，一般使用PMOS 二极管耐压值为: \\[{U_{\\rm{D}}} \\ge \\sqrt 2 {U_i}\\] 4.2 给电感续流当存在感性负载时，断路时需要使用二极管进行放电（电机驱动，电磁继电器,Buck-Boost电路） Buck电路 4.3 限幅 [-0.7V,0.7V]限幅","categories":[],"tags":[]},{"title":"MOSFET电气元件","slug":"Hardware/MOSFET电气元件","date":"2021-03-14T01:48:05.000Z","updated":"2021-05-06T09:42:43.287Z","comments":true,"path":"posts/42bad010/","link":"","permalink":"http://zhenxingblog.site/posts/42bad010/","excerpt":"MOSFET使用注意事项","text":"MOSFET使用注意事项 MOSFET介绍1.1 MOSFET作为开关管使用箭头流入G极的是 NMOSFET箭头流出G极的是 PMOSFET上述箭头无论流入/出 都是S极(源) PMOS: VGS=0 导通 VGS=1 截止NMOS: VGS=0 截止 VGS=1 导通 1.2 性能指标 VDSS最大漏-源电压 漏极与源极之间的最大压差，否者会发生雪崩击穿 VGS最大栅-源电压 栅-源两级之间最大压差，可以在GS之间并联一个稳压二极管或单相/双向TVS管 ID 连续漏电电流 MOS管在正常温度下，可允许通过的最大电流 VGS(th) 栅-源电压阈值 MOSFET导通时使用的最小阈值 RDS(on) 导通电阻 漏-源电阻 Ciss:输入电容 将DS短接，用交流信号测得GS之间的电容(即Ciss=Cgs+Cgd),寄生电容充放电会对MOSFET开断延时有影响 Qgs、Qgd和Qg 各个电极之间的电荷 1.3 IRF7480MTRPbF:DirectFET® N-Channel Power MOSFET 芯片手册参数 设计电路主要主意: VDSS不能超过40V,为保留一定裕度，两端电压不能超过24V ID=137A,流过电流不能操作100A VGS=[-20,20V],栅源之间电压不能超过20V，可以考虑添加双向TVS VGS(th)=3V，MOS驱动芯片的输出电压能力要大于3V 相同型号MOS并联，可增大一倍ID电流 RDS=1.2m欧 2. 电路应用2.1 电源防反插(PMOS) 2.2 双电源供电-USB防反冲 2.3 常用MOSFET IRF540 IRF640 IRF840 SI2301 SI2302 电气元件3D模型SnapEDA 3dcontentcentral","categories":[{"name":"Hardware","slug":"Hardware","permalink":"http://zhenxingblog.site/categories/Hardware/"}],"tags":[{"name":"MOSFET","slug":"MOSFET","permalink":"http://zhenxingblog.site/tags/MOSFET/"}]},{"title":"Stopwatch使用","slug":"DotNet/Stopwatch使用","date":"2021-03-09T00:43:28.000Z","updated":"2021-03-09T03:05:23.283Z","comments":true,"path":"posts/556d494c/","link":"","permalink":"http://zhenxingblog.site/posts/556d494c/","excerpt":"Stopwatch类用于测量一段代码的运行时长，可以测量多个时间间隔的总运行时间。一般使用步骤Start() &gt;&gt;&gt; DoSomething() &gt;&gt;&gt; Stop()，最后使用 Elapsed 属性检查运行时间。每次Start()计算时间都要叠加前几次的运行时长","text":"Stopwatch类用于测量一段代码的运行时长，可以测量多个时间间隔的总运行时间。一般使用步骤Start() &gt;&gt;&gt; DoSomething() &gt;&gt;&gt; Stop()，最后使用 Elapsed 属性检查运行时间。每次Start()计算时间都要叠加前几次的运行时长 1.介绍官网介绍:Stopwatch 1.1 属性 属性名 描述 权限 Frequency:long 计时器频率 RO IsHighResolution:bool 是否基于高分辨率性能计数器 RO Elapsed:TimeSpan 当前实例测量得出的总运行时间 RO ElapsedMilliseconds:long 当前实例测量得出的总毫秒数 RO IsRunning:bool 计时器是否在运行 RO 1.2方法 方法名 描述 GetTimestamp():long 获取计时器机制中的当前最小时间单位数 StartNew():Stopwatch 创建新实例，并开始计时 Reset() 运行时间重置 Restart() 重新计数并开始测量 Start() 开始测量 Stop() 停止测量 2.Example2.1 简单测量 Task1:单次测量Task2:叠加测量Task3:重新测量 123456789101112131415161718192021222324252627282930313233343536373839404142434445static void Main()&#123; Console.WriteLine(&quot;Stopwatch fist Start ...&quot;); Stopwatch sw = new Stopwatch(); #region [第一次运行Stopwatch] sw.Start(); Thread.Sleep(5000); sw.Stop(); Console.WriteLine(&quot;Stopwatch first Stop ...&quot;); Console.WriteLine($&quot;Stopwatch运行时长:&#123;sw.ElapsedMilliseconds&#125;ms&quot;); #endregion #region [其他工作] Thread.Sleep(2000); Console.WriteLine(&quot;使用2秒，完成其他工作 ...&quot;); #endregion #region [第二次运行Stopwatch] Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine(&quot;*** 第一、二次运行时长的叠加 ***&quot;); Console.WriteLine(&quot;Stopwatch second Start ...&quot;); sw.Start(); Thread.Sleep(1000); sw.Stop(); Console.WriteLine(&quot;Stopwatch second Stop ...&quot;); Console.WriteLine($&quot;Stopwatch运行时长:&#123;sw.ElapsedMilliseconds&#125;ms&quot;); Console.ForegroundColor = ConsoleColor.White; #endregion #region [第二次运行Stopwatch，重新计数] Console.ForegroundColor = ConsoleColor.Green; Console.WriteLine(&quot;*** 第三次重新计数 ***&quot;); Console.WriteLine(&quot;Stopwatch third Start ...&quot;); sw.Restart(); Thread.Sleep(3000); sw.Stop(); Console.WriteLine(&quot;Stopwatch third Stop ...&quot;); Console.WriteLine($&quot;Stopwatch运行时长:&#123;sw.ElapsedMilliseconds&#125;ms&quot;); Console.ForegroundColor = ConsoleColor.White; #endregion Console.ReadLine();&#125; 输出效果","categories":[{"name":"C#","slug":"C","permalink":"http://zhenxingblog.site/categories/C/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://zhenxingblog.site/tags/C/"},{"name":"时间检测","slug":"时间检测","permalink":"http://zhenxingblog.site/tags/%E6%97%B6%E9%97%B4%E6%A3%80%E6%B5%8B/"}]},{"title":"Monitor和Lock区别","slug":"DotNet/Monitor和Lock区别","date":"2021-03-09T00:42:31.000Z","updated":"2021-03-09T03:05:19.706Z","comments":true,"path":"posts/9d3dd46f/","link":"","permalink":"http://zhenxingblog.site/posts/9d3dd46f/","excerpt":"Lock和Monitor没区别，简单来讲Lock是Monitor的进一步封装锁定的目的：由于多个线程并行/并发处理同一个“数据对象”（比如：在其它线程的某个地方发生了Clear、Add、Remove、Change等操作），导致“数据对象”不断变化，没法用了，所以，为了保证数据在某个计算时刻的“恒定”，使用排它锁将“数据对象”锁定，然后就视该“数据对象”为“一个恒定量”进行逻辑处理。","text":"Lock和Monitor没区别，简单来讲Lock是Monitor的进一步封装锁定的目的：由于多个线程并行/并发处理同一个“数据对象”（比如：在其它线程的某个地方发生了Clear、Add、Remove、Change等操作），导致“数据对象”不断变化，没法用了，所以，为了保证数据在某个计算时刻的“恒定”，使用排它锁将“数据对象”锁定，然后就视该“数据对象”为“一个恒定量”进行逻辑处理。 1.代码使用 Lock Monitor Lock(obj){执行任务} Monitor.Enter(obj);try{执行任务}finally{Monitor.Exit(obj); } 2.Example 使用Task.WaitAll 等待子线程完成 Monitor琐死要变化的参数，使其在使用时无法突变 使用Stopwatch观察子线程执行时长 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061static void Main()&#123; Console.WriteLine(&quot;Monitor Demo ...&quot;); int nTasks = 0; object obj = nTasks; List&lt;Task&gt; tasks = new List&lt;Task&gt;(); try &#123; Console.WriteLine($&quot;nTasks:&#123;nTasks&#125;;MainThreadId:&#123;Thread.CurrentThread.ManagedThreadId&#125;&quot;); Stopwatch sw = new Stopwatch(); sw.Start(); for (int ctr=0;ctr&lt;10;ctr++) &#123; tasks.Add(Task.Run(async() =&gt; &#123; Console.ForegroundColor = ConsoleColor.White; Console.WriteLine($&quot;子任务&#123;Thread.CurrentThread.ManagedThreadId&#125; 延时5000ms&quot;); await Task.Delay(5000); Monitor.Enter(obj); try &#123; nTasks++; Console.WriteLine($&quot;nTasks:&#123;nTasks&#125;;SubThreadId:&#123;Thread.CurrentThread.ManagedThreadId&#125;&quot;); &#125; finally &#123; Monitor.Exit(obj); &#125; &#125;)); &#125; Console.ForegroundColor = ConsoleColor.Green; Console.WriteLine(&quot;不会堵塞&quot;); Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine(&quot;使用Task.WaitAll(tasks.ToArray());等待tasks子线程结束,才执行主线程:等待子线程结束&quot;); Task.WaitAll(tasks.ToArray()); sw.Stop(); Console.ForegroundColor = ConsoleColor.Red; Console.WriteLine(&quot;开始执行主线程&quot;); Console.WriteLine($&quot;执行时长:&#123;sw.ElapsedMilliseconds&#125;ms&quot;); Console.WriteLine($&quot;nTasks:&#123;nTasks&#125;;MainThreadId:&#123;Thread.CurrentThread.ManagedThreadId&#125;&quot;); Console.ForegroundColor = ConsoleColor.White; &#125; catch(AggregateException e) &#123; String msg = String.Empty; foreach (var ie in e.InnerExceptions) &#123; Console.WriteLine(&quot;&#123;0&#125;&quot;, ie.GetType().Name); if (!msg.Contains(ie.Message)) msg += ie.Message + Environment.NewLine; &#125; Console.WriteLine(&quot;\\nException Message(s):&quot;); Console.WriteLine(msg); &#125; Console.ReadLine();&#125; 效果","categories":[{"name":"C#","slug":"C","permalink":"http://zhenxingblog.site/categories/C/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://zhenxingblog.site/tags/C/"},{"name":"线程锁","slug":"线程锁","permalink":"http://zhenxingblog.site/tags/%E7%BA%BF%E7%A8%8B%E9%94%81/"}]},{"title":"CSS入门","slug":"WEB前端/CSS入门","date":"2021-03-02T07:18:14.000Z","updated":"2021-03-14T02:44:15.694Z","comments":true,"path":"posts/cd86acaf/","link":"","permalink":"http://zhenxingblog.site/posts/cd86acaf/","excerpt":"在WEB前端开发中，采用&lt;Talbe/&gt;布局并不是太灵活，一般采用DIV+CSS方式进行布局。","text":"在WEB前端开发中，采用&lt;Talbe/&gt;布局并不是太灵活，一般采用DIV+CSS方式进行布局。 1. &lt;div/&gt;标签简介 独占一行，块级模块元素，需要使用CSS进行渲染 可以定义文档中的分区或小节 在CSS定义时，采用id或class进行标记 2. CSS简介 设置HTML文本内容的字体、大小、对其方式；图片外形、大小、边框、边距等 是一种层叠样式表，可以给一个标签添加多个样式进行叠加 2.1 语法规则 语法: 选择器&#123;属性1:属性值;属性2:属性值;...&#125; 选择器: HTML中作用的标签对象 选择器语法严格区分大小写，而属性名和值不区分 代码注释采用/* comment */ 2.2 CSS样式引入 CSS可以嵌入HTML文档中，也可以引用以.css为扩展名的文件 1.行内样式 通过标签&lt;style&gt;&lt;style/&gt;设置元素样式 1&lt;a style=&quot;color:#00ff00;font-size:30px&quot; href=&quot;www.baidu.com&quot;&gt;百度一下&lt;/a&gt; 2.内部样式 将CSS代码集成到HTML文档的&lt;head/&gt;标签中 123456789101112131415&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;404&lt;/title&gt; &lt;style&gt; body&#123; background-color: #ddd; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 3.外部样式 外部样式(链入式)，将所有样式放在一个或多个以.css为扩展名的外部样式表文件中，通过&lt;link/&gt;标签将样式链接到HTML文档 一个HTML文档，可以通过&lt;link/&gt;标签，链接多个css样式表 1.新建css/styles.css文件 123 body&#123; background-color: #ddd;&#125; 2.HTML引入styles.css文件 123456789 &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;404&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/styles.css&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt; 2.3 CSS选择器指定特定HTML元素的语法，有5种: 元素选择器、ID选择器、类选择器、属性选择器、包含选择器。 1.元素选择器 标签名&#123;属性1:属性值1;属性2:属性值;属性3:属性值&#125; 标签名: HTML的标签，如h1,h2,h3,body,p,stong ...优点: 对页面的同一类型标签进行统一标记 2.ID选择器 使用#IdName进行标识 12#demo1 &#123;color:#0f0;&#125;&lt;h1 id=&quot;demo1&quot;&gt;ID选择器&lt;h1&gt; 3.类选择器 使用.类名进行标识,可为指定标签定义相同的样式 123.ucclass &#123;font-size: 25px&#125;&lt;h1 class&#x3D;&quot;ucclass&quot;&gt;类选择器&lt;&#x2F;h1&gt; 4.属性选择器 语法格式: 标签名[标签属性=’属性值’]{属性1:属性值;属性2:属性值;}, 组要是对元素(如input)选择器的扩展,进行进一步过滤 1234&lt;style&gt; input[type&#x3D;&quot;text&quot;]&#123;background-color:yellow;&#125; input[type&#x3D;&quot;password&quot;]&#123;background-color:green;&#125;&lt;&#x2F;style&gt; 5.包含选择器 给指定父标签中子标签设置样式 父标签 子标签&#123;属性1:属性值;属性2:属性值;&#125; 12345&lt;style&gt; #d1 div&#123; color: red; &#125;&lt;/style&gt; 2.4 CSS样式 border: 设置边框样式 style=&quot;border:1px solid #f00&quot;: 线宽1 实线 红色 width,height: 设置标签的宽度、高度 1234567&lt;style type=&quot;text/css&quot;&gt;div &#123; border: 1px solid #000; width: 200px; height: 200px;&#125;&lt;/style&gt; 布局: float clear div是单独一行排列，而在实际开发中，需要左右方式进行排版，这就需要使用浮动(float),属性值: left: 元素向左浮动 right: 元素向右浮动 none: 元素不浮动(默认值) 浮动元素不占用原文档流的位置，所以会对页面中其他元素产生影响，需要使用clear属性禁用该行的浮动,属性值: left:不允许左侧有浮动 right:不允许右侧有浮动 both:不允许两侧有浮动 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;默认上下布局&lt;/h1&gt; &lt;div&gt; &lt;div&gt;默认上下布局: 区域1&lt;/div&gt; &lt;div&gt;默认上下布局: 区域2&lt;/div&gt; &lt;/div&gt; &lt;br /&gt; &lt;h1&gt;浮动布局&lt;/h1&gt; &lt;div&gt; &lt;div style=&quot;float: left;color: green;&quot;&gt;浮动布局: 该区域1左对齐 &lt;/div&gt; &lt;div style=&quot;float: left;color: green;&quot;&gt;浮动布局: 该区域2左对齐&lt;/div&gt; &lt;div style=&quot;float: right;color: green;&quot;&gt;浮动布局: 该区域3右对齐&lt;/div&gt; &lt;div style=&quot;float: right;color: green;&quot;&gt;浮动布局: 该区域3右对齐&lt;/div&gt; &lt;div style=&quot;color: red;&quot;&gt;默认布局: 该区域独站一行，浮动div并不属于该行，只属于浮于该控件上方&lt;/div&gt; &lt;div &gt;默认布局: 该区域独站一行&lt;/div&gt; &lt;/div&gt; &lt;h1&gt;取消浮动布局&lt;/h1&gt; &lt;div&gt; &lt;div style=&quot;float: left;color: green;&quot;&gt;浮动布局: 该区域1左对齐 &lt;/div&gt; &lt;div style=&quot;float: left;color: green;&quot;&gt;浮动布局: 该区域2左对齐&lt;/div&gt; &lt;div style=&quot;color: red;clear: both;&quot;&gt;默认布局: 该区域独站一行，左右禁止浮动&lt;/div&gt; &lt;div style=&quot;float: right;color: green;&quot;&gt;浮动布局: 该区域3右对齐&lt;/div&gt; &lt;div style=&quot;float: right;color: green;&quot;&gt;浮动布局: 该区域3右对齐&lt;/div&gt; &lt;div &gt;默认布局: 该区域独站一行，但右对齐浮于该行右方&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 浮动布局效果 转化: display HTML标签元素一般分为: 块标签元素和行内标签元素，使用display,可是行内标签元素与块标签元素相互转化 块标签元素: &lt;h1/&gt;、&lt;div/&gt;、&lt;ul/&gt;等 行内标签元素: 不必另起一行开始，也不强迫后续元素在新一行显示，如&lt;span/&gt;、&lt;a/&gt;等 格式: 选择器{display:属性值}，其属性值: inline:此标签元素将为行内标签元素 block: 此标签元素为块标签元素 inline-block: 将对象呈递为内联对象，但对象内容作为块对象呈递(即几个块为一个整体，形成一个块元素) none: 该对象将被隐藏，不显示、不占页面空间 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; span&#123; border: 1px solid #000; width:100px; height: 40px; &#125; div&#123; border: 1px solid #000; width:100px; height: 40px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;行内元素&lt;/h1&gt; &lt;span&gt;行内元素1&lt;/span&gt; &lt;span&gt;行内元素2&lt;/span&gt; &lt;h1&gt;块元素&lt;/h1&gt; &lt;div&gt;块元素1&lt;/div&gt; &lt;div&gt;块元素2&lt;/div&gt; &lt;h1&gt;行内元素-&gt;块元素&lt;/h1&gt; &lt;span style=&quot;display: block;&quot;&gt;span块元素1&lt;/span&gt; &lt;span style=&quot;display: block;&quot;&gt;span块元素2&lt;/span&gt; &lt;h1&gt;块元素-&gt;行内元素&lt;/h1&gt; &lt;div style=&quot;display: inline;&quot;&gt;div行内元素1&lt;/div&gt; &lt;div style=&quot;display: inline;&quot;&gt;div行内元素2&lt;/span&gt; &lt;h1&gt;块元素-&gt;内联-块元素&lt;/h1&gt; &lt;div style=&quot;display: inline-block;&quot;&gt;内联-块元素1&lt;/div&gt; &lt;div style=&quot;display: inline-block;&quot;&gt;内联-块元素2&lt;/span&gt; &lt;/body&gt;&lt;/html&gt; Dispaly:行内元素与块元素转换效果 字体:color,font-size color: 字体颜色，#000000(RGB 255 255 255) font-size: 字体大小 123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div style=&quot;height: 50px;width:200px;border: 1px solid #000;&quot;&gt; &lt;a href=&quot;&quot; &gt;超链接默认格式&lt;/a&gt; &lt;a href=&quot;&quot; style=&quot;text-decoration: none;&quot;&gt;取消超链接下划线&lt;/a&gt; &lt;/div&gt; &lt;div style=&quot;height: 50px;width:200px;border: 1px solid #000;&quot;&gt; &lt;a href=&quot;&quot; style=&quot;line-height: 50px;background-color: red;&quot;&gt;设置超链接下划线行高&lt;/a&gt; &lt;a href=&quot;&quot; style=&quot;color: red;&quot;&gt;超链接字体红色&lt;/a&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 字体大小颜色效果 背景颜色: background-color 123456&lt;ul style=&quot;background-color: darkgray;color: white;font-size: 30px;&quot;&gt; &lt;li&gt;列表1&lt;/li&gt; &lt;li style=&quot;background-color: black;&quot;&gt;列表2&lt;/li&gt; &lt;li&gt;列表3&lt;/li&gt; &lt;li&gt;列表4&lt;/li&gt;&lt;/ul&gt; 背景颜色设置效果 2.4 CSS盒子模型CSS盒子模型规定了元素框处理元素的内容、内边距、边框和外边距。物理结构如下: ; 内边距 padding 可以按照上、右、下、左的顺序设置内边距,各边可以使用不同单位或百分比设置 或者设置属性padding-top、padding-right、padding-bottom和padding-left 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .padding1 &#123; padding: 10px 0.25em 2ex 20%; background-color: red; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1 style=&quot;background-color: red;&quot;&gt;默认padding&lt;/h1&gt; &lt;h1 class=&quot;padding1&quot;&gt; padding&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 内边距设置效果 边框 border 属性有: border-top-style、border-right-style、border-bottom-style、border-left-style 外边距 margin 属性有: margin-top、margin-right、margin-bottom、margin-left 3. 案例 效果 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;网络商城&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; .header &#123; height: 60px; &#125; /*顶层元素向左浮动*/ .header .top&#123; float :left; width: 33.2%; height: 100%; align-content: center; &#125; .top ul &#123; list-style: none; margin: 0px; &#125; .top ul li &#123; display: inline-block; &#125; /* 内容中间对齐 */ .top a&#123; text-decoration: none; line-height: 60px; align-content: center; &#125; .menu &#123; width: 100%; background-color: #333; &#125; .menu ul &#123; list-style: none; margin: 0px; &#125; .menu li &#123; display: inline-block; padding: 0px; &#125; .menu a &#123; text-decoration: none; display: block; line-height: 30px; padding: 10px 15px; color: #fff; &#125; .menu a .show &#123; background-color: #000; &#125; .newProducts &#123; width: 100%; height: 500px; &#125; .newProducts .left &#123; float:left; width: 15%; height: 500px; &#125; .newProducts .right &#123; float:left; width: 83%; height: 500px; &#125; .newProducts .right .first &#123; float:left; width: 50%; height: 250px; &#125; .newProducts .right .item &#123; float:left; width: 16.4%; height: 250px; text-align: center; display: block; &#125; .newProducts .left img &#123; width: 100%; height: 100%; &#125; .newProducts .right .first img &#123; width: 100%; height: 100%; &#125; .newProducts .right .item img &#123; width: 75%; height: auto; margin: 40px 0px 10px 0px; &#125; .newProducts .right .item p &#123; margin: 0px; color: red; &#125; .newProducts .right .item p a&#123; margin: 0px; color: black; &#125; div ul &#123; list-style: none; &#125; div ul li &#123; display: inline-block; padding: 0px 10px; &#125; #footer &#123; text-align: center; &#125; #footer a&#123; text-decoration: none; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 父容器 --&gt; &lt;div class=&quot;root&quot;&gt; &lt;!-- 1.第一行Header --&gt; &lt;div class=&quot;header&quot;&gt; &lt;div class=&quot;top&quot;&gt; &lt;img src=&quot;img/logo2.png&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;top&quot;&gt; &lt;img src=&quot;img/header.png&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;top&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;登录&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;注册&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;购物&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 2.Menu --&gt; &lt;div class=&quot;menu&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot; class=&quot;show&quot;&gt;电脑办公&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;手机数码&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;&quot;&gt;鞋靴箱包&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!-- 3.轮播图 --&gt; &lt;div style=&quot;width:100%;&quot;&gt; &lt;img src=&quot;img/1.jpg&quot; width=&quot;100%&quot; /&gt; &lt;/div&gt; &lt;!-- 4.最新商品信息 --&gt; &lt;div class=&quot;newProducts&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;h2&gt;最新商品&lt;img src=&quot;img/title2.jpg&quot;&gt;&lt;/img&gt;&lt;/h2&gt; &lt;!--&lt;div style=&quot;float:left;font-size: 25px;&quot;&gt;最新商品信息&lt;/div&gt; &lt;div style=&quot;float:left;height: 100%;&quot; &gt; &lt;img style=&quot;vertical-align: bottom;&quot; src=&quot;img/title2.jpg&quot;/&gt; &lt;/div&gt;--&gt; &lt;div class=&quot;left&quot;&gt; &lt;img src=&quot;img/big01.jpg&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;div class=&quot;first&quot;&gt; &lt;img src=&quot;img/middle01.jpg&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small01.jpg&quot; /&gt; &lt;p &gt;&lt;a&gt;破碎机&lt;/a&gt;&lt;/p&gt; &lt;p &gt;￥699&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small02.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;显示屏&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥699&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small03.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;电饭锅&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥299&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small04.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;电炖锅&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥199&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small05.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;饮水机&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥399&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small06.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;洗衣机&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥999&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small07.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;扫地机器人&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥1999&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small08.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;高压锅&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥1299&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small09.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;烤箱&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥2199&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt; &lt;div&gt; &lt;img src=&quot;img/ad.jpg&quot; width=&quot;100%&quot; /&gt; &lt;/div&gt; &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt; &lt;div class=&quot;newProducts&quot;&gt; &lt;div class=&quot;title&quot;&gt; &lt;h2&gt;热门商品&lt;img src=&quot;img/title2.jpg&quot;&gt;&lt;/img&gt;&lt;/h2&gt; &lt;!--&lt;div style=&quot;float:left;font-size: 25px;&quot;&gt;最新商品信息&lt;/div&gt; &lt;div style=&quot;float:left;height: 100%;&quot; &gt; &lt;img style=&quot;vertical-align: bottom;&quot; src=&quot;img/title2.jpg&quot;/&gt; &lt;/div&gt;--&gt; &lt;div class=&quot;left&quot;&gt; &lt;img src=&quot;img/big01.jpg&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;div class=&quot;first&quot;&gt; &lt;img src=&quot;img/middle01.jpg&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small01.jpg&quot; /&gt; &lt;p &gt;&lt;a&gt;破碎机&lt;/a&gt;&lt;/p&gt; &lt;p &gt;￥699&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small02.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;显示屏&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥699&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small03.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;电饭锅&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥299&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small04.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;电炖锅&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥199&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small05.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;饮水机&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥399&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small06.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;洗衣机&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥999&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small07.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;扫地机器人&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥1999&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small08.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;高压锅&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥1299&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;item&quot;&gt; &lt;img src=&quot;img/small09.jpg&quot; /&gt; &lt;p&gt;&lt;a&gt;烤箱&lt;/a&gt;&lt;/p&gt; &lt;p style=&quot;color: red;&quot;&gt;￥2199&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;clear: both;&quot;&gt;&lt;/div&gt; &lt;!-- footer --&gt; &lt;div&gt; &lt;img src=&quot;img/footer.jpg&quot; style=&quot;width: 100%;&quot; /&gt; &lt;/div&gt; &lt;div id=&quot;footer&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;关于我们&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;联系我们&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;招贤纳士&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;法律声明&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;友情链接&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;支付方式&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;配送方式&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;服务声明&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;广告声明&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; Copyright © 2005-2016 ZhenXing 版权所有(学习) &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"WEB前端开发","slug":"WEB前端开发","permalink":"http://zhenxingblog.site/categories/WEB%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://zhenxingblog.site/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://zhenxingblog.site/tags/CSS/"}]},{"title":"01.DotNet Core Blog:基于EFCore数据库设计与开发","slug":"DotNetCore/01-DotNet-Core-Blog-数据库设计","date":"2021-02-27T05:29:37.000Z","updated":"2021-03-02T07:19:41.706Z","comments":true,"path":"posts/ec75ea98/","link":"","permalink":"http://zhenxingblog.site/posts/ec75ea98/","excerpt":"使用Asp.Net Core设计开发个人博客:第一阶段数据库设计","text":"使用Asp.Net Core设计开发个人博客:第一阶段数据库设计 1.数据库设计 文章表(PaperTable) 变量名称 描述 类型 ID 唯一ID int Title 文章标题 nvarchar(30) Content 内容 text Time 创建时间 DateTime PaperTypeID 文章类型ID(考虑使用外键) int Browers 浏览量 int Supports 点赞 int AuthorID 作者ID int 文章类型表(PaperID) 变量名称 描述 类型 ID 唯一ID int Name 类型名 nvarchar(30) 作者表(AuthorID) 变量名称 描述 类型 ID 唯一ID int Name 姓名 nvarchar(12) UserName 账号 nvarchar(16) UserPwd 密码(MD5加密) nvarchar(64) 2.数据库开发2.1 NuGet 安装EFCore的相关库 数据库系统 配置示例 NuGet程序包 SQLServerAzureSQL .UseSqlServer(connectionString) Microsoft.EntityFrameworkCore.SqlServer Azure Cosmos DB .UseCosmos(connectionString, databaseName) Microsoft.EntityFrameworkCore.Cosmos SQLite .UseSqlite(connectionString) Microsoft.EntityFrameworkCore.Sqlite EFCore内存中数据库 .UseInMemoryDatabase(databaseName) Microsoft.EntityFrameworkCore.InMemory PostgreSQL* .UseNpgsql(connectionString) Npgsql.EntityFrameworkCore.PostgreSQL MySQL/MariaDB* .UseMySql((connectionString) Pomelo.EntityFrameworkCore.MySql Oracle* .UseOracle(connectionString) Oracle.EntityFrameworkCore 2.2 Model库的类设计，与数据库上下文绑定在一起2.2.1 实体属性使用实体属性将模型类映射到列表(详见微软EFCore官方文档) [Key]:主键 [NotMapped]:排除特定属性 [Column(&quot;xxx&quot;)]:指定列名 [Column(TypeName=&quot;nvarchar(200)&quot;)],[Column(TypeName = &quot;decimal(5, 2)&quot;)]:指定属性类型 [MaxLength(500)]:指定最大长度 [required]:属性值不可以为NULL [optional]:属性值可以为NULL [DatabaseGenerated(DatabaseGeneratedOption.Identity)]非主键，自动生成键值，如日期 [DatabaseGenerated(DatabaseGeneratedOption.None)]无值生成 通用属性ID &gt;&gt;&gt; 继承 12345public class BaseId&#123; [Key] public int Id &#123; get; set; &#125;&#125; AuthorTable设计 123456789101112[Table(&quot;AuthorTable&quot;)]public class AuthorInfo:BaseId&#123; [Column(TypeName = &quot;nvarchar(12)&quot;)] public string Name &#123; get; set; &#125; [Column(TypeName = &quot;nvarchar(16)&quot;)] public string UserName &#123; get; set; &#125; [Column(TypeName = &quot;nvarchar(64)&quot;)] public string UserPwd &#123; get; set; &#125;&#125; PaperTypeTable设计 123456[Table(&quot;PaperTypeTable&quot;)]public class PaperTypeInfo:BaseId&#123; [Column(TypeName = &quot;nvarchar(12)&quot;)] public string Name &#123; get; set; &#125;&#125; PaperTable 12345678910111213141516171819[Table(&quot;PaperTable&quot;)]public class PaperInfo:BaseId&#123; [Column(TypeName = &quot;nvarchar(30)&quot;)] public string Title &#123; get; set; &#125; [Column(TypeName = &quot;text&quot;)] public string Content &#123; get; set; &#125; public DateTime Time &#123; get; set; &#125; public int Browers &#123; get; set; &#125; public int Supports &#123; get; set; &#125; public int AuthorId &#123; get; set; &#125; public int PaperTypeId &#123; get; set; &#125; // 该数据类型不映射至数据库 [NotMapped] public PaperTypeInfo PaperType &#123; get; set; &#125; [NotMapped] public AuthorInfo Author &#123; get; set; &#125;&#125; DbContext 生存期、配置和初始化 步骤: 创建 DbContext 上下文实例 根据上下文实例执行CRUD操作 调用 SaveChanges 或 SaveChangesAsync将上述操作写入数据库中 释放DbContext 方法1: ASP.NET Core 依赖关系注入中的 DbContext 创建上下文类ApplicationDbContext类必须公开具有DbContextOptions参数的公共构造函数。这是将 AddDbContext的上下文配置传递到DbContext的方式1234567public class ApplicationDbContext : DbContext&#123; public ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt; options) : base(options) &#123; &#125;&#125; 使用Startup.cs的ConfigureServices方法中的AddDbContext 将 EF Core 添加到此配置。 12345678public void ConfigureServices(IServiceCollection services)&#123; services.AddControllers(); services.AddDbContext&lt;ApplicationDbContext&gt;( options =&gt; options.UseMySql(&quot;server=127.0.0.1;user id=root;persistsecurityinfo=True&quot;) ) ;&#125; 方法2: 使用”new”的简单的 DbContext 初始化 1234567public class ApplicationDbContext : DbContext&#123; protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) &#123; optionsBuilder.UseMySql(@&quot;server=127.0.0.1;user id=root;persistsecurityinfo=True&quot;); &#125;&#125; 或者通过构造函数传递 连接字符串 123456789101112131415public class ApplicationDbContext : DbContext&#123; private readonly string _connectionString; public ApplicationDbContext(string connectionString) &#123; _connectionString = connectionString; &#125; protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) &#123; optionsBuilder.UseMySql(_connectionString); &#125;&#125; 在或者 12345var contextOptions = new DbContextOptionsBuilder&lt;ApplicationDbContext&gt;() .UseMySql(@&quot;Server=(localdb)\\mssqllocaldb;Database=Test&quot;) .Options;using var context = new ApplicationDbContext(contextOptions); DbContext 使用 123456789public class MyController&#123; private readonly ApplicationDbContext _context; public MyController(ApplicationDbContext context) &#123; _context = context; &#125;&#125; 2.2.2 为每个Table建立通用CRUD接口库12345678910111213141516171819202122232425262728293031323334353637383940public interface IBaseRepository&lt;TEntity&gt; where TEntity:class,new()&#123; #region [CRUD] Task&lt;bool&gt; CreateAsync(TEntity entity); Task&lt;bool&gt; DeleteAsync(int id); Task&lt;bool&gt; UpdateAsync(TEntity entity); Task&lt;TEntity&gt; QueryAsync(int id); #endregion /// &lt;summary&gt; /// 查询所有数据 /// &lt;/summary&gt; /// &lt;returns&gt;&lt;/returns&gt; Task&lt;List&lt;TEntity&gt;&gt; QueryAllAsync(); /// &lt;summary&gt; /// 自定义查询条件 /// &lt;/summary&gt; /// &lt;param name=&quot;func&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; Task&lt;List&lt;TEntity&gt;&gt; QueryAsync(Expression&lt;Func&lt;TEntity,bool&gt;&gt; func); /// &lt;summary&gt; /// 分页查询 /// &lt;/summary&gt; /// &lt;param name=&quot;page&quot;&gt;设置跳转的页码&lt;/param&gt; /// &lt;param name=&quot;size&quot;&gt;每页的数量&lt;/param&gt; /// &lt;param name=&quot;total&quot;&gt;总数目&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; Task&lt;List&lt;TEntity&gt;&gt; QueryAsync(int page,int size,ref int total); /// &lt;summary&gt; /// 自定义查询 + 分页 /// &lt;/summary&gt; /// &lt;param name=&quot;func&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;page&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;size&quot;&gt;&lt;/param&gt; /// &lt;param name=&quot;total&quot;&gt;&lt;/param&gt; /// &lt;returns&gt;&lt;/returns&gt; Task&lt;List&lt;TEntity&gt;&gt; QueryAsync(Expression&lt;Func&lt;TEntity, bool&gt;&gt; func,int page, int size, ref int total);&#125; 2.2.3 实现通用CRUD库1","categories":[{"name":"DotNet Core","slug":"DotNet-Core","permalink":"http://zhenxingblog.site/categories/DotNet-Core/"}],"tags":[{"name":"WebApi","slug":"WebApi","permalink":"http://zhenxingblog.site/tags/WebApi/"},{"name":"EFCore","slug":"EFCore","permalink":"http://zhenxingblog.site/tags/EFCore/"},{"name":"Blog","slug":"Blog","permalink":"http://zhenxingblog.site/tags/Blog/"}]},{"title":"Reinforcement Learning And optimal adaptive control","slug":"ADP/Reinforcement-Learning-And-optimal-adaptive-control","date":"2021-02-26T14:19:52.000Z","updated":"2021-02-26T14:25:52.557Z","comments":true,"path":"posts/fd577013/","link":"","permalink":"http://zhenxingblog.site/posts/fd577013/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"ESP32_Interrupt","slug":"ESP32/ESP32-Interrupt","date":"2021-02-18T11:12:06.000Z","updated":"2021-02-26T13:26:54.823Z","comments":true,"path":"posts/b8e6041e/","link":"","permalink":"http://zhenxingblog.site/posts/b8e6041e/","excerpt":"实现两种功能:利用轮询方式判断按键是否按下，短、长按，连发等功能的实现利用外部中断判断按键是否按下，获取按下时长","text":"实现两种功能:利用轮询方式判断按键是否按下，短、长按，连发等功能的实现利用外部中断判断按键是否按下，获取按下时长 0.原理图 BOOT KEY 作为本次实验对象 1.按键FIFO轮询采样 功能逻辑简图 定义按键FIFO缓冲区Buffer,10个字节大小,设计读/写指针:Read/Write 定义按键结构体，实现按键防抖，长按识别，长按连发功能 以10ms的间隔，扫描按键，并将按下、长按、弹起的键值用bsp_PutKey()放入Buffer中,而处理任务通过bspGetKey()获取键值，执行相应策略 代码include &lt;stdio.h&gt;#include &quot;freertos/FreeRTOS.h&quot;#include &quot;freertos/task.h&quot;#include &quot;driver/ledc.h&quot;#include &quot;driver/gpio.h&quot;#include &quot;esp_err.h&quot;#include &lt;esp_log.h&gt;#include &quot;driver/adc.h&quot;#include &quot;esp_adc_cal.h&quot;#define KEY_FIFO_SIZE 10#define KEY_COUNT 1#define KEY_FILTER_TIME 5#define KEY_LONG_TIME 100 /* 单位10ms， 持续1秒，认为长按事件 */#define KEY1_Pin 0typedef enum&#123; KEY_NONE = 0, K1_DOWN = 1, K1_UP = 2, K1_LONG = 3,&#125;KEY_VALUE_ENUM;typedef struct&#123; uint8_t Buffer[KEY_FIFO_SIZE]; uint8_t Read; uint8_t Write;&#125;KEY_FIFO_TYPE;static KEY_FIFO_TYPE s_tKeyFIFO;void bsp_PutKey(uint8_t keyCode)&#123; s_tKeyFIFO.Buffer[s_tKeyFIFO.Write] = keyCode; if(++s_tKeyFIFO.Write &gt;= KEY_FIFO_SIZE) &#123; s_tKeyFIFO.Write = 0; &#125;&#125;uint8_t bsp_GetKey(void)&#123; uint8_t ret; if(s_tKeyFIFO.Read == s_tKeyFIFO.Write) &#123; ret = KEY_NONE; &#125;else&#123; ret = s_tKeyFIFO.Buffer[s_tKeyFIFO.Read]; if(++s_tKeyFIFO.Read&gt;=KEY_FIFO_SIZE) &#123; s_tKeyFIFO.Read=0; &#125; &#125; return ret;&#125;typedef struct&#123; uint8_t (*IsKeyDownFunc)(void); uint8_t FilterCount; // 滤波计数 uint16_t LongCount; // 长按有效计数值 uint16_t LongTime; // 按下持续时间，0:不检测长按 uint8_t State; // 当前按键状态 uint8_t RepeatSpeed;// 连续按键周期 uint8_t RepeatCount;// 连续按键计数器&#125;KEY_TYPE;static KEY_TYPE s_tBtn[KEY_COUNT];static uint8_t IsKeyDown1(void)&#123; uint8_t flag=0; if(gpio_get_level(KEY1_Pin)==0) flag = 1; return flag;&#125;static void bsp_InitKeyVar(void)&#123; uint8_t i=0; s_tKeyFIFO.Read = 0; s_tKeyFIFO.Write = 0; for(i=0;i&lt;KEY_COUNT;i++) &#123; s_tBtn[i].LongTime = KEY_LONG_TIME; s_tBtn[i].FilterCount = KEY_FILTER_TIME/2; s_tBtn[i].State = 0; s_tBtn[i].RepeatSpeed = 0; s_tBtn[i].RepeatCount = 0; &#125; s_tBtn[0].IsKeyDownFunc = IsKeyDown1;&#125;static void bsp_InitKeyHard(void)&#123; // 配置GPIO结构体 gpio_config_t io_conf; io_conf.intr_type = GPIO_INTR_ANYEDGE; // 下降沿和上升沿触发中断 io_conf.pin_bit_mask = 1 &lt;&lt; KEY1_Pin; // 设置GPIO号 io_conf.mode = GPIO_MODE_INPUT; // 模式输入 io_conf.pull_up_en = GPIO_PULLUP_ENABLE; // 端口上拉使能 gpio_config(&amp;io_conf);&#125;void bsp_InitKey(void)&#123; bsp_InitKeyVar(); bsp_InitKeyHard();&#125;static void bsp_DetectKey(uint8_t i)&#123; KEY_TYPE *pBtn; pBtn = &amp;s_tBtn[i]; if(pBtn-&gt;IsKeyDownFunc()) &#123; // 短按 if(pBtn-&gt;FilterCount&lt;KEY_FILTER_TIME) &#123; pBtn-&gt;FilterCount = KEY_FILTER_TIME; &#125;else if(pBtn-&gt;FilterCount&lt;2*KEY_FILTER_TIME) &#123; pBtn-&gt;FilterCount++; &#125;else&#123; // 之前未按下 if(pBtn-&gt;State==0) &#123; pBtn-&gt;State = 1; bsp_PutKey((uint8_t)(3*i+1)); &#125;else&#123; // 1s以内无需处理 &#125; // 如果支持长按 if(pBtn-&gt;LongTime&gt;0) &#123; if(pBtn-&gt;LongCount&lt;pBtn-&gt;LongTime) &#123; // 单次长按 if(++pBtn-&gt;LongCount==pBtn-&gt;LongTime) &#123; bsp_PutKey((uint8_t)(3*i+3)); &#125; &#125;else&#123; // 超出长按阈值--&gt;&gt;&gt;连发 if(pBtn-&gt;RepeatSpeed&gt;0) &#123; if(++pBtn-&gt;RepeatCount&gt;=pBtn-&gt;RepeatSpeed) &#123; pBtn-&gt;RepeatCount=0; bsp_PutKey((uint8_t)(3*i+1)); &#125; &#125; &#125; &#125; &#125; &#125;else&#123; // 判断按键是否弹起 if(pBtn-&gt;FilterCount&gt;KEY_FILTER_TIME)&#123; pBtn-&gt;FilterCount=KEY_FILTER_TIME; &#125;else if(pBtn-&gt;FilterCount!=0)&#123; pBtn-&gt;FilterCount--; &#125;else&#123; if(pBtn-&gt;State==1) &#123; pBtn-&gt;State = 0; bsp_PutKey((uint8_t)(3*i+2)); &#125; &#125; pBtn-&gt;LongCount=0; pBtn-&gt;RepeatCount=0; &#125; &#125;void bsp_KeyScan(void)&#123; uint8_t i=0; for(i=0;i&lt;KEY_COUNT;i++) &#123; bsp_DetectKey(i); &#125;&#125;// 任务优先级: 4void TSK_KeyScan10ms(void *arg)&#123; for(;;) &#123; bsp_KeyScan(); vTaskDelay(10 / portTICK_PERIOD_MS); &#125;&#125;// TSK_UserIF// 接口消息处理(获取键值，LED等闪烁)// 优先级:1void TSK_UserIF(void *arg)&#123; for(;;) &#123; uint8_t val = bsp_GetKey(); if(val!=0) &#123; switch(val) &#123; case K1_DOWN: ESP_LOGI(&quot;KEY查询方式&quot;, &quot;按键按下,输入键值:%d&quot;,val); break; case K1_UP: ESP_LOGI(&quot;KEY查询方式&quot;, &quot;按键弹起,输入键值:%d&quot;,val); break; case K1_LONG: ESP_LOGI(&quot;KEY查询方式&quot;, &quot;按键长按,输入键值:%d&quot;,val); break; &#125; &#125; vTaskDelay(500 / portTICK_PERIOD_MS); &#125;&#125;void app_main()&#123; ESP_LOGW(&quot;KEY查询方式&quot;,&quot;&gt;&gt;&gt;&gt;==== GPIO初始化... ====&lt;&lt;&lt;&lt;&quot;); bsp_InitKey(); ESP_LOGW(&quot;KEY查询方式&quot;,&quot;&gt;&gt;&gt;&gt;==== 创建KEY轮询任务... ====&lt;&lt;&lt;&lt;&quot;); xTaskCreate(TSK_KeyScan10ms,&quot;KeyScan&quot;,1024*2,NULL,4,NULL); xTaskCreate(TSK_UserIF,&quot;Task_LOG&quot;,1024*2,NULL,1,NULL);&#125; 效果 2.中断方式","categories":[{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"Interrupt","slug":"Interrupt","permalink":"http://zhenxingblog.site/tags/Interrupt/"}]},{"title":"ESP32_ADC","slug":"ESP32/ESP32-ADC","date":"2021-02-18T08:44:16.000Z","updated":"2021-02-26T13:26:54.821Z","comments":true,"path":"posts/4a89b3b9/","link":"","permalink":"http://zhenxingblog.site/posts/4a89b3b9/","excerpt":"ESP32 集成了2个12位逐次逼近型AD,有5个专用转换控制器管理,支持18个AD转换通道,可以测量内部VDD等电压信号，本次实验利用一路AD采集光敏电阻电压","text":"ESP32 集成了2个12位逐次逼近型AD,有5个专用转换控制器管理,支持18个AD转换通道,可以测量内部VDD等电压信号，本次实验利用一路AD采集光敏电阻电压 特性 1个内部电压vdd33通道、2个pa_pkdet通道 可配置12位、11位、10位、9位多种分辨率 支持DMA(1个控制器支持) 支持多通道扫描模式(2个控制器支持) 支持Deep-sleep模式运行(1个控制器支持) 支持ULP协处理器控制(2个控制器支持) ESP32拥有5个专用转换器: 2个高性能多通道扫描转换器，SAR ADC1/2 Controller [ADC1 8路:GPIO32-39,ADC2 10路:GPIO0,2,4,12-15,25-27] 2个支持Deep-sleep模式下低功耗转换器, RTC ADC1/2 Controller 1个功率检测/峰值检测控制器 ADC2 限制 仅当WiFi驱动程序未启动时,应用程序才能使用ADC2,因为具有更高优先级的WiFi驱动程序也使用ADC.某些ADC2引脚用作捆扎引脚(GPIO0,2,15),因此无法自由使用 1.硬件原理图 2.硬件初始化 设置ADC分辨率 设置ADC基准电压 3.API介绍 导入头文件: “driver/adc.h” “esp_adc_cal.h” 函数名 描述 案例 esp_err_t adc1_config_width(adc_bits_width_t width_bit) 配置ADC1所有通道分辨率width_bit:ADC_WIDTH_9Bit:ADC_WIDTH_12Bit adc1_config_width(ADC_WIDTH_12Bit) esp_err_t adc1_config_channel_atten(adc1_channel_t channel,adc_atten_t atten) 配置ADC1通道的基准电压源,默认0db:1.1Vchannel:ADC1_CHANNEL_0:ADC1_CHANNEL_7atten:ADC_ATTEN_0db,2_5db,6db,11db[1,1/1.34,1/2,1/3.6] adc1_config_channel_atten(ADC1_CHANNEL_0,ADC_ATTEN_0db) int adc1_get_voltage(adc1_channel_t channel) 获取ADC1通道读数 adc1_get_voltage(ADC1_CHANNEL_0) 代码 1234567891011121314151617181920212223242526272829303132#include &lt;stdio.h&gt;#include &quot;freertos/FreeRTOS.h&quot;#include &quot;freertos/task.h&quot;#include &quot;driver/ledc.h&quot;#include &quot;driver/gpio.h&quot;#include &quot;esp_err.h&quot;#include &lt;esp_log.h&gt;#include &quot;driver/adc.h&quot;#include &quot;esp_adc_cal.h&quot;#define LIGHT_SENSOR_CHANNEL ADC1_CHANNEL_6void bsp_ADCInit()&#123; adc1_config_width(ADC_WIDTH_12Bit);// 12位分辨率 adc1_config_channel_atten(LIGHT_SENSOR_CHANNEL,ADC_ATTEN_DB_6);// 设置通道6和2.2V参考电压&#125;void app_main()&#123; const char* TAG = &quot;Light Sensor ADC&quot;; int lightPower; ESP_LOGW(TAG,&quot;&gt;&gt;&gt; Light Sensor Initialize... &lt;&lt;&lt;&quot;); bsp_ADCInit(); ESP_LOGW(TAG,&quot;&gt;&gt;&gt; Light Sensor Start... &lt;&lt;&lt;&quot;); for(;;) &#123; lightPower = adc1_get_raw(LIGHT_SENSOR_CHANNEL); ESP_LOGI(TAG,&quot;ADC_Value: %d Voltage: %f mV&quot;, lightPower, (lightPower*2200.0)/4096); vTaskDelay(1000 / portTICK_RATE_MS); &#125;&#125; 效果","categories":[{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"ADC","slug":"ADC","permalink":"http://zhenxingblog.site/tags/ADC/"}]},{"title":"ESP32_LEDC_PWM","slug":"ESP32/ESP32-LEDC-PWM","date":"2021-02-18T03:08:49.000Z","updated":"2021-02-26T13:26:54.825Z","comments":true,"path":"posts/d213032/","link":"","permalink":"http://zhenxingblog.site/posts/d213032/","excerpt":"LEDC(LED Control)是ESP32封装好的PWM定时器,可以产生16个通道，用于生成独立波形、驱动RGB灯、呼吸灯以及电机调速本次Demo，使用LEDC控制LED作为呼吸灯。呼吸灯原理分析：模拟人体呼吸，吸气和呼气各占1.5S，空气吸入量0%-&gt;100%,呼出量100%-&gt;0%变化。因此设计灯光占空比在3s内由0%-&gt;100%,然后下一个3s由100%-&gt;0%变化","text":"LEDC(LED Control)是ESP32封装好的PWM定时器,可以产生16个通道，用于生成独立波形、驱动RGB灯、呼吸灯以及电机调速本次Demo，使用LEDC控制LED作为呼吸灯。呼吸灯原理分析：模拟人体呼吸，吸气和呼气各占1.5S，空气吸入量0%-&gt;100%,呼出量100%-&gt;0%变化。因此设计灯光占空比在3s内由0%-&gt;100%,然后下一个3s由100%-&gt;0%变化 0.程序设计 使用Timer0作为LEDC的时钟源,频率为8KHz,定时器精度为13位 设置初始占空比为0,变化时长为3S,设置占空比对应的计数为[0%:0,100%:(2^13-1)=8000] API介绍 函数名 描述 案例 ledc_channel_config_t LEDC通道配置描述speed_mode:输出速度channel:0~7intr_type:中断使能通道占空比[0,2^bit_num-1] constledc_channel_config_t ledc_timer; esp_err_t ledc_channel_config(constledc_channel_config_t*ledc_conf) LEDC通道配置ESP_OK:SuccessESP_ERR_INVALID_ARG:Parameter error ledc_channel_config(&amp;ledc_conf) ledc_timer_config_t LEDC定时器配置描述speed_mode:输出速度bit_num:计数精度的位数timer_num:定时器选择[0~2]freq_hz:定时器频率 ledc_timer_config_t ledc_timer esp_err_t ledc_fade_func_install(intintr_alloc_flags) 注册渐变服务intr_alloc_flags:0:无中断 1:中断 ledc_fade_func_install(0) esp_err_t ledc_fade_start(ledc_mode_t speed_mode,ledc_channel_t channel,ledc_fade_mode_t wait_done) 渐变开始speed_mode:LEDC速度模式channel:使用的通道号wait_done:堵塞直到渐变完成 ledc_fade_start(ledc_channel[ch].speed_mode,ledc_channel[ch].channel, LEDC_FADE_NO_WAIT); esp_err_t ledc_set_fade_with_time(ledc_mode_t speed_mode,ledc_channel_t channel,int target_duty, int max_fade_time_ms) 渐变动作值设定speed_mode:LEDC速度模式channel:使用的通道号target_duty:目标占空比max_fade_time_ms:渐变时间 ledc_fade_start(ledc_channel[ch].speed_mode,ledc_channel[ch].channel, LEDC_FADE_NO_WAIT); 1.引入必要头文件12#include &quot;driver/ledc.h&quot;#include &quot;driver/gpio.h&quot; 2.LEDC硬件初始化 配置Timer0~3作为PWM定时器的时钟源,包括分辨率、频率、输出模式等 配置LEDC的输出通道，包括输出GPIO与CHANNEL的绑定、PWM时钟源绑定，占空比设置 统一注册LEDC的输出通道配置信息 LEDC使能淡入淡出功能 12345678910111213141516171819202122232425262728293031323334353637383940414243#define LEDC_TOTAL_NUM 1 // PWM通道数，可以多个#define LEDC_HS_TIMER LEDC_TIMER_0 // 选择PWM定时器0-3#define LEDC_HS_MODE LEDC_HIGH_SPEED_MODE // PWM输出模式#define LEDC_HS_CH0_GPIO 4 // LED控制器通道对应GPIO#define LEDC_HS_CH0_CHANNEL LEDC_CHANNEL_0 // LED控制器通道号#define LEDC_TARGET_DUTY 8191 // 渐增的最终目标占空比 2^13-1#define LEDC_FADE_TIME 3000 // 渐变时间3000ms#define LEDC_TIMER_FREQUENCT 8000 // 定时器计数频率 const char* TAG = &quot;LED Breath&quot;;ledc_channel_config_t ledc_channel[LEDC_TOTAL_NUM];int ch=0;void bsp_LEDCInit()&#123; // 1.配置Timer0的作为PWM定时器 ledc_timer_config_t ledc_timer = &#123; .duty_resolution = LEDC_TIMER_13_BIT, // PWM占空比分辨率 .freq_hz = LEDC_TIMER_FREQUENCT, // PWM信号频率 .speed_mode = LEDC_HS_MODE, // 定时器模式 .timer_num = LEDC_HS_TIMER // 定时器序号 &#125;; ledc_timer_config(&amp;ledc_timer); // 2.配置定时器的高速通道 // 2.1 设置通道配置信息 ledc_channel[0].channel = LEDC_HS_CH0_CHANNEL; // 使用的通道 ledc_channel[0].duty = 0; // 占空比 ledc_channel[0].gpio_num = LEDC_HS_CH0_GPIO; // 通道对应的GPIO ledc_channel[0].speed_mode = LEDC_HS_MODE; // 定时器输出模式 ledc_channel[0].timer_sel = LEDC_HS_TIMER; // 使用的Timer0作为PWM定时器 // 2.2 注册设置通道配置信息 for (ch = 0; ch &lt; LEDC_TOTAL_NUM; ch++) &#123; ledc_channel_config(&amp;ledc_channel[ch]); &#125; // 3. LEDC使能淡入淡出服务 ledc_fade_func_install(0); // 注册LEDC服务，在调用前使用，参数是作为是否允许中断&#125; 3.功能实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748void bsp_GpioInit(void)&#123; ESP_LOGI(TAG, &quot;&gt;&gt;&gt;===== 1.GPIO初始化 =====&lt;&lt;&lt;&quot;); gpio_pad_select_gpio(LEDC_HS_CH0_GPIO); // 选择要操作的GPIO gpio_set_direction(LEDC_HS_CH0_GPIO, GPIO_MODE_OUTPUT); // 设置GPIO为推挽输出模式 ESP_LOGI(TAG, &quot;&gt;&gt;&gt;===== GPIO初始化成功! =====&lt;&lt;&lt;&quot;);&#125;void bsp_LEDBreath(int target_duty)&#123; ESP_LOGI(TAG,&quot;PWM Duty From %d To %d&quot;,target_duty==0?0:100,target_duty==0?100:0); for(ch=0;ch&lt;LEDC_TOTAL_NUM;ch++) &#123; ledc_set_fade_with_time( ledc_channel[ch].speed_mode, ledc_channel[ch].channel, target_duty, LEDC_FADE_TIME); ledc_fade_start( ledc_channel[ch].speed_mode, ledc_channel[ch].channel, LEDC_FADE_NO_WAIT); // 不堵塞 &#125; vTaskDelay(LEDC_FADE_TIME/portTICK_PERIOD_MS);&#125;void app_main()&#123; int duty = LEDC_TARGET_DUTY; bsp_GpioInit(); bsp_LEDCInit(); for(;;) &#123; bsp_LEDBreath(duty); if(duty!=0) &#123; duty=0; &#125;else &#123; duty=LEDC_TARGET_DUTY; &#125; &#125;&#125; 效果 ;","categories":[{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"PWM","slug":"PWM","permalink":"http://zhenxingblog.site/tags/PWM/"}]},{"title":"ESP32_LED","slug":"ESP32/ESP32-LED","date":"2021-02-17T17:09:44.000Z","updated":"2021-02-26T13:33:30.490Z","comments":true,"path":"posts/c52e8408/","link":"","permalink":"http://zhenxingblog.site/posts/c52e8408/","excerpt":"ESP32控制LED灯亮灭 (裸机模式&amp;FreeRTOS系统)","text":"ESP32控制LED灯亮灭 (裸机模式&amp;FreeRTOS系统) 1.功能需求 裸机模式:以1s间隔点亮/熄灭LED FreeRTOS:以任务的方式:1s间隔点亮/熄灭LED 2.硬件原理图 3.软件设计3.1 裸机代码 1.硬件初始化 绑定GPIO引脚 GPIO功能模式: GPIO推挽输入/输出/开漏输入/输出 设置GPIO输出电平 12345678void bsp_GpioInit(void)&#123; ESP_LOGI(TAG, &quot;&gt;&gt;&gt;===== 1.GPIO初始化 =====&lt;&lt;&lt;&quot;); gpio_pad_select_gpio(GPIO_LED_Pin); // 选择要操作的GPIO gpio_set_direction(GPIO_LED_Pin, GPIO_MODE_OUTPUT); // 设置GPIO为推挽输出模式 ESP_LOGI(TAG, &quot;&gt;&gt;&gt;===== GPIO初始化成功! =====&lt;&lt;&lt;&quot;);&#125; API介绍 头文件路径: #include &quot;driver/gpio.h&quot; 函数名 描述 案例 void gpio_pad_select_gpio(uint8_t gpio_num); 绑定GPIO gpio_pad_select_gpio(4) esp_err_t gpio_set_direction(gpio_num_t gpio_num, gpio_mode_t mode); 设置GPIO功能模式(输入/输出方向) gpio_set_direction(4,GPIO_MODE_DISABLE)GPIO_MODE_DISABLEGPIO_MODE_INPUTGPIO_MODE_OUTPUTGPIO_MODE_OUTPUT_ODGPIO_MODE_INPUT_OUTPUT_ODGPIO_MODE_INPUT_OUTPUT void vTaskDelay(uint ticks) 延迟n个节拍 vTaskDelay(1000 / portTICK_PERIOD_MS) 主函数 12345678910111213141516171819202122232425262728293031// Hello Bug Example#include &lt;stdio.h&gt;#include &quot;freertos/FreeRTOS.h&quot;#include &quot;freertos/task.h&quot;#include &quot;esp_system.h&quot;#include &quot;esp_spi_flash.h&quot;#include &lt;esp_log.h&gt;#include &quot;driver/gpio.h&quot;#define GPIO_LED_Pin 4const char* TAG = &quot;LED&quot;;void app_main()&#123; bool toggleFlag = true; bsp_GpioInit(); for(;;)&#123; ESP_LOGI(TAG, &quot;Turning %s...\\n&quot;,toggleFlag?&quot;On&quot;:&quot;Off&quot;); vTaskDelay(1000 / portTICK_PERIOD_MS); gpio_set_level(GPIO_LED_Pin,toggleFlag); toggleFlag=!toggleFlag; &#125; ESP_LOGI(TAG, &quot;Restarting now.&quot;); //fflush(stdout); esp_restart();&#125; 效果 ; 3.2 FreeRTOS代码 API介绍 函数名 描述 案例 portBASE_TYPE xTaskCreate(pdTASK_CODE pvTaskCode,const portCHAR * const pcName,unsigned portSHORT usStackDepth,void *pvParameters,unsigned portBASE_TYPE uxPriority,xTaskHandle *pvCreatedTask); 创建任务句柄pvTaskCode:指向任务函数,一般死循环pcName:任务函数的别名，仅仅是方便调试所用usStackDepth:任务堆栈的深度，定义了堆栈可以包含的变量数,其字节数大小=堆栈深度*堆栈宽度。pvParameters:作为参数的指针，当任务创建时uxPriority:任务的优先级。包括MPU支持的系统可以选择在特权模式创建任务，通过设置优先级参数的portPRIVILEGE_BIT位。比如，创建一个特权任务在优先级2，则uxPriority 应当设置为(2|portPRIVILEGE_BIT)pvCreatedTask:回传一个句柄，以便创建的任务可以被关联。返回值:pdPASS,如果任务成功创建且添加到就绪列表，否则返回一个错误代码，见 projdefs.h xTaskCreate(&amp;blink_task,&quot;LED_Task&quot;,configMINIMAL_STACK_SIZE,NULL,5,NULL); blink_task创建 1234567891011 void blink_task(void *pvParameter) &#123;bool toggleFlag = true;ESP_LOGI(TAG, &quot;LED Blink Task开始...\\n&quot;); for(;;)&#123; ESP_LOGI(TAG, &quot;Turning %s...&quot;,toggleFlag?&quot;On&quot;:&quot;Off&quot;); vTaskDelay(1000 / portTICK_PERIOD_MS); gpio_set_level(GPIO_LED_Pin,toggleFlag); toggleFlag=!toggleFlag;&#125; &#125; 主函数 123456void app_main()&#123; bsp_GpioInit(); xTaskCreate(&amp;blink_task,&quot;LED_Task&quot;,configMINIMAL_STACK_SIZE,NULL,5,NULL); //for(;;); 似乎不能出现&#125; 效果 ;","categories":[{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"LED","slug":"LED","permalink":"http://zhenxingblog.site/tags/LED/"}]},{"title":"HexTag标签插件使用","slug":"Hexo/HexTag标签插件使用","date":"2021-02-17T15:29:21.000Z","updated":"2021-02-26T13:26:54.827Z","comments":true,"path":"posts/761ddf72/","link":"","permalink":"http://zhenxingblog.site/posts/761ddf72/","excerpt":"Tag Plugin是一种支持Hexo以标签插件形式来标准Markdown中显示具有自定义尺寸的图像。","text":"Tag Plugin是一种支持Hexo以标签插件形式来标准Markdown中显示具有自定义尺寸的图像。 1.文本居中引用- Centered Quote 代码 1&#123;% cq %&#125;世间所有的相遇，都是久别重逢&#123;% endcq %&#125; 效果 世间所有的相遇，都是久别重逢 2.提示块 - Note 配置 主题配置文件_config.yml 12345678910111213141516# Note tag (bs-callout).note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. # 风格 style: flat # 要不要图标 icons: true # 圆角矩形 border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 代码 1234567891011121314151617181920212223&#123;% note default %&#125;default 提示块标签&#123;% endnote %&#125;&#123;% note primary %&#125;primary 提示块标签&#123;% endnote %&#125;&#123;% note success %&#125;success 提示块标签&#123;% endnote %&#125;&#123;% note info %&#125;info 提示块标签&#123;% endnote %&#125;&#123;% note warning %&#125;warning 提示块标签&#123;% endnote %&#125;&#123;% note danger %&#125;danger 提示块标签&#123;% endnote %&#125; 效果 default 提示块标签 primary 提示块标签 success 提示块标签 info 提示块标签 warning 提示块标签 danger 提示块标签 3.标签 - Label 代码 1234567&#123;% label default@默认 %&#125; &#123;% label primary@主要 %&#125; &#123;% label success@成功 %&#125; &#123;% label info@信息 %&#125; &#123;% label warning@警告 %&#125; &#123;% label danger@危险 %&#125; &#123;% label success@这是成功的信息%&#125; 效果 默认 主要 成功 信息 警告 危险 这是成功的信息 4.选项卡 - Tabs 修改主题配置文件 1234567# Tabs tagtabs: enable: true transition: tabs: true labels: true border_radius: 0 代码 1234567891011&#123;% tabs tab,1 %&#125; 名字为tab，默认在第1个选项卡，如果是-1则隐藏&lt;!-- tab --&gt;**选项卡 1** &lt;!-- endtab --&gt;&lt;!-- tab --&gt;**选项卡 2**&lt;!-- endtab --&gt;&lt;!-- tab A --&gt;**选项卡 3** 名字为A&lt;!-- endtab --&gt;&#123;% endtabs %&#125; 效果 tab 1tab 2A选项卡 1 选项卡 2选项卡 3 名字为A 5.按钮 - Button 代码 1&#123;% button url, text, icon [class], [title] %&#125; 描述 url : 绝对或相对 URL icon : FontAwesome 图标名称（开头没有’fa-‘）。如果未指定文本，则为必需 [class] : FontAwesome 类：fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X ，可选参数。 [title] : 鼠标悬停时的工具提示，可选参数。 Example 代码: 1&lt;div class=&quot;text-center&quot;&gt;&lt;div&gt;&#123;% button https://zhenxingblog.site/ ,首页,home fa-fw,这是ZhenXing的个人博客首页%&#125; &#123;% button https://www.iqiyi.com/ ,观影,film fa-fw,爱奇艺%&#125; &#123;% button https://www.cnki.net/,阅读,book fa-fw,中国知网%&#125;&lt;/div&gt;&lt;/div&gt; 效果: 首页 观影 阅读","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://zhenxingblog.site/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://zhenxingblog.site/tags/Hexo/"},{"name":"插件","slug":"插件","permalink":"http://zhenxingblog.site/tags/%E6%8F%92%E4%BB%B6/"}]},{"title":"ESP32打印日志","slug":"ESP32/ESP32打印日志","date":"2021-02-17T09:37:53.000Z","updated":"2021-02-26T13:26:54.826Z","comments":true,"path":"posts/dd7e10ee/","link":"","permalink":"http://zhenxingblog.site/posts/dd7e10ee/","excerpt":"ESP32日志报文打印API测试，掌握Debug,Info,Warn以及Error四种日志报文输出，获取ESP32芯片相关信息并打印输出","text":"ESP32日志报文打印API测试，掌握Debug,Info,Warn以及Error四种日志报文输出，获取ESP32芯片相关信息并打印输出 1.日志打印API介绍 函数名 描述 案例 esp_chip_info(esp_chip_info_t* info) info:芯片信息结构体指针 esp_chip_info(&amp;info) ESP_LOGI(const char* tag,char* format_msg) 打印信息: [tag:format_msg] ESP_LOGI(&quot;Info&quot;,&quot;This is a Information&quot;);ESP_LOGI(&quot;Info&quot;,&quot;ESP32 Chip Cores Count: %d&quot;,chip_info.cores);ESP_LOGI(&quot;Info&quot;,&quot;ESP32 Chip, WiFi%s%s,&quot;,(chip_info.features &amp; CHIP_FEATURE_BT)?&quot;/BT&quot;:&quot;&quot;,(chip_info.features&amp;CHIP_FEATURE_BLE) ? &quot;/BLE&quot;:&quot;&quot;);ESP_LOGI(&quot;Info&quot;,&quot;SPI Flash Chip Size: %dMByte %s flash&quot;,spi_flash_get_chip_size()/(1024*1024),(chip_info.features &amp; CHIP_FEATURE_EMB_FLASH)?&quot;Embedded&quot; : &quot;External&quot;); esp_base_mac_addr_get(uint8_t MAC[6]) WiFi的MAC地址 esp_base_mac_addr_get(MAC)ESP_LOGI(&quot;Info&quot;, &quot;Base MAC Addr : %02X.%02X.%02X.%02X.%02X.%02X&quot;,MAC[0],MAC[1],MAC[2],MAC[3],MAC[4],MAC[5]); ESP_LOGW(const char* tag,char* msg) 打印报警:[tag,msg] ESP_LOGW(“Warn”, “This is a Warn”) ESP_LOGE(const char* tag,char* msg) 打印错误:[tag,msg] ESP_LOGE(“Error”, “This is a Error”) ESP_LOGD (const char* tag,char* msg) 打印调试:[tag,msg] ESP_LOGD(“Debug”, “This is a Debug”) ESP_LOGV(const char* tag,char* msg) 详细:[tag,msg] ESP_LOGV(“Detial”, “This is a Detail”) esp_restart() 软件复位 esp_restart(); 2.功能设计Info:CPU基本信息 如Flash Size,Core Num,RAM Size等打印输出: Warn,Error信息 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;stdio.h&gt;#include &quot;freertos/FreeRTOS.h&quot;#include &quot;freertos/task.h&quot;#include &quot;esp_system.h&quot;#include &quot;esp_spi_flash.h&quot;#include &lt;esp_log.h&gt;const static char *InfoTag = &quot;Info&quot;;const static char *WarnTag = &quot;Warn&quot;;const static char *ErrorTag = &quot;Error&quot;;void app_main()&#123; uint8_t MAC[6]; ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt;===== 打印ESP32芯片信息 =====&lt;&lt;&lt;&quot;); // 打印芯片信息 esp_chip_info_t chip_info; esp_chip_info(&amp;chip_info); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32芯片内核数目: %d&quot;,chip_info.cores); if(chip_info.model == 1)&#123; ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32芯片架构: ESP32&quot;); &#125;else if(chip_info.model == 2)&#123; ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32芯片架构: ESP32S2&quot;); &#125;else&#123; ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32芯片架构: Unknown Model&quot;); &#125; ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32芯片特征量: %d&quot;,chip_info.features); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32芯片版本号: %d&quot;,chip_info.revision); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32芯片支持通讯方式: WIFI%s%s, &quot;, (chip_info.features &amp; CHIP_FEATURE_BT) ? &quot;/BT&quot; : &quot;&quot;, (chip_info.features &amp; CHIP_FEATURE_BLE) ? &quot;/BLE&quot; : &quot;&quot;); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; ESP32 Flash容量: %dMB %s flash&quot;, spi_flash_get_chip_size() / (1024 * 1024), (chip_info.features &amp; CHIP_FEATURE_EMB_FLASH) ? &quot;Embedded&quot; : &quot;External&quot;); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; Free Heap Size is: %d B&quot;,esp_get_free_heap_size()); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; Free Internal Heap Size is: %d B&quot;,esp_get_free_internal_heap_size()); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; Free minimum Heap Size is: %d B&quot;,esp_get_minimum_free_heap_size()); esp_base_mac_addr_get(MAC); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt; 网络MAC地址: %02X.%02X.%02X.%02X.%02X.%02X&quot;,MAC[0],MAC[1],MAC[2],MAC[3],MAC[4],MAC[5]); ESP_LOGI(InfoTag, &quot;&gt;&gt;&gt;===== ESP32芯片介绍结束 =====&lt;&lt;&lt;&quot;); vTaskDelay(1000 / portTICK_PERIOD_MS); ESP_LOGW(WarnTag, &quot;&gt;&gt;&gt; This is a Warning!&quot;); ESP_LOGE(ErrorTag, &quot;&gt;&gt;&gt; This is a Error!&quot;); while(1)&#123; vTaskDelay(1000 / portTICK_PERIOD_MS); &#125; // ESP_LOGI(TAG, &quot;Restarting now.&quot;); // esp_restart();&#125; 输出结果 Post not found: ESP32-LED","categories":[{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"打印日志信息","slug":"打印日志信息","permalink":"http://zhenxingblog.site/tags/%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/"}]},{"title":"ESP32开发板介绍","slug":"ESP32/ESP32开发板介绍","date":"2021-02-16T15:42:15.000Z","updated":"2021-02-26T13:26:54.825Z","comments":true,"path":"posts/209c3d55/","link":"","permalink":"http://zhenxingblog.site/posts/209c3d55/","excerpt":"购买ESP32开发板,掌握ESP32开发环境，API调用，主要为了熟悉并掌握MQTT功能，开发板购买链接如下:https://item.taobao.com/item.htm?spm=a2oq0.12575281.0.0.50111deb2Ij1As&amp;ft=t&amp;id=626366733674","text":"购买ESP32开发板,掌握ESP32开发环境，API调用，主要为了熟悉并掌握MQTT功能，开发板购买链接如下:https://item.taobao.com/item.htm?spm=a2oq0.12575281.0.0.50111deb2Ij1As&amp;ft=t&amp;id=626366733674 1.开发板功能模块1.1 主控模块：ESP32-WROOM-32E 32位微处理器 4M Flash 448KB ROM 520KB SRAM 16KB RTC SRAM WiFi:802.11b/g/n 802.11n 信道频率：2412~2484MHz Bluetooth: V4.2和LE标准 40MHz 1.2 开发板外设 LED指示灯 Post not found: ESP32-LED 电容触摸感应 CH340 USB转TTL自动下载电路 光照传感器 WS2812B RGB模块 DHT1LED1温湿度传感器 ADXL345B三轴加速度传感器 AT24C02存储芯片 红外接收头&amp;发送 TF卡 LCD触摸屏 1.3 开发环境配置 安装.espressif和esp-idf-v4.2 两个软件安装包，并设置用户变量路径 安装git,python3.7工具 并将根目录放入到环境变量path中 新建cmd.exe的快捷方式，并重命名为”esp32_cmdtools”，启动命令设置如下： 目标:C:\\Windows\\system32\\cmd.exe /k &quot;&quot;D:\\ESP32Compiler\\.espressif\\idf_cmd_init.bat&quot; &quot;D:\\Anaconda3\\envs\\pytorch&quot; &quot;D:\\Program Files\\Git\\cmd\\&quot;&quot; 起始位置：D\\ESP32Compiler\\esp-idf-v4.2 直接运行esp32_cmdtools文件，会进行环境编译 idf.py：打印输出帮助菜单 idf.py build 编译工程 idf.py -p PORT flash下载固件到芯片（PORT:COMx） idf.py monitor 会调用idf_monitor工具来显示 ESP32 和 ESP32-S2 的串口输出。 一次性执行构建，烧写和监视 idf.py flash monitor idf.py app 仅构建应用程序。 idf.py app-flash 仅烧写应用程序(会自动判断是否有源文件发生了改变而后重新构建应用程序) idf.py erase_flash 擦除整块 Flash idf.py -p PORT erase_flash flash 擦除flash并下载 idf.py -p COM9 flash monitor从串口9下载并运行打开口显示设备调试信息 idf.py -p COM9 build flash monitor 编译+下载+打印输出 VsCode配置 -&gt; Settings.json 添加一下代码12345678910&#123; &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;, &quot;terminal.integrated.shellArgs.windows&quot;: [ &quot;/k&quot;, &quot;D:\\\\ESP32Compiler\\\\esp-idf-v4.2\\\\export.bat&quot; ], &quot;idf.showOnboardingOnInit&quot;:true, &quot;idf.espIdfPathWin&quot;: &quot;D:\\\\ESP32Compiler\\\\esp-idf-v4.2&quot;, &quot;C_Cpp.updateChannel&quot;: &quot;Insiders&quot;,&#125; Post not found: ESP32打印调试输出","categories":[{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"}],"tags":[{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"硬件","slug":"硬件","permalink":"http://zhenxingblog.site/tags/%E7%A1%AC%E4%BB%B6/"}]},{"title":"HTML入门笔记","slug":"WEB前端/HTML入门笔记","date":"2021-02-12T14:22:21.000Z","updated":"2021-03-09T07:41:36.415Z","comments":true,"path":"posts/ea82bb07/","link":"","permalink":"http://zhenxingblog.site/posts/ea82bb07/","excerpt":"HTML基本语法","text":"HTML基本语法 1. HTML文件模板12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;404&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot; homePageName=&quot;返回&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 2. 网页注册页设计与开发2.1 使用的控件 &lt;form/&gt; &lt;input/&gt; &lt;select/&gt; 2.2 控件介绍 &lt;form/&gt; 表单标签，如果数据需要提交到服务器，负责收集数据的标签必须存放到表单标签中 action: 请求路径，确定表单提交到服务器的地址 methed: 请求方式，Get, POST。 Get: 提交数据被追加到请求路径上如/register.html?username=jack&amp;password=jack,追加使用?连接，而多组数据使用&amp;连接; Post: 提交数据不在被追加到请求路径 &lt;input/&gt; 用于获取用户输入信息 name: 元素名，如果需要将表单数据提交到服务器，必须提供name属性值 type: text,password,radio,submit,checkbox,file,hidden,reset,image,button 注: submit: 提交表单数据到服务器，一般不写name属性,否则会将内容提交到服务器 reset: 重置表单数据 value: 设置input标签默认值，submit、reset和button的控件名称 size: 大小 checked: 是否选中 readonly: 是否只读 disabled: 是否可用 maxlength: 允许输入最大长度 &lt;select/&gt; 下拉列表标签,需要&lt;option&gt;子标签配合使用 multiple: 是否多选 size: 多选时，选项数目 &lt;option/&gt;: 子标签,selected:是否选中,value: 发送给服务器的选项值 &lt;textarea/&gt; 文本域标签 cols: 文本域列数 rows: 文本域行数 &lt;button/&gt; 按钮 type: button,reset,sumbit,很少使用，不同浏览器功能不一样 2.3 Example设计开发注册页面 2.3.1 设计注册页面简单布局如下: 使用&lt;Table/&gt;布局，创建10*3的表格 2.3.2 开发123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;404&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;&quot;&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; height=&quot;300&quot;&gt; &lt;tr&gt; &lt;td colspan=&quot;3&quot;&gt; &lt;font color=&quot;#CCCCCC&quot;&gt;会员注册 USER REGISTER&lt;/font&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot; align=&quot;right&quot;&gt; 用户名 &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;loginname&quot; size=&quot;60&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot; align=&quot;right&quot;&gt; 密码 &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;loginpwd&quot; size=&quot;60&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot; align=&quot;right&quot;&gt; 确认密码 &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;password&quot; name=&quot;reloginpwd&quot; size=&quot;60&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot; align=&quot;right&quot;&gt; E-mail &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;email&quot; size=&quot;60&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot; align=&quot;right&quot;&gt; 姓名 &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; size=&quot;60&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot; align=&quot;right&quot;&gt; 性别 &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;男&quot; checked=&quot;checked&quot; /&gt;男 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;女&quot; checked=&quot;checked&quot; /&gt;女 &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;1&quot; align=&quot;right&quot;&gt; 出生日期 &lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;birthday&quot; size=&quot;60&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td width=&quot;80&quot; align=&quot;right&quot; width=&quot;80&quot;&gt; 验证码 &lt;/td&gt; &lt;td width=&quot;100&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;verifyCode&quot; /&gt; &lt;/td&gt; &lt;td &gt; &lt;img src=&quot;img/yanzhengma.png&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td colspan=&quot;2&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;注册&quot; /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 2.3.3 实现","categories":[{"name":"WEB前端开发","slug":"WEB前端开发","permalink":"http://zhenxingblog.site/categories/WEB%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://zhenxingblog.site/tags/HTML/"}]}],"categories":[{"name":"markdown","slug":"markdown","permalink":"http://zhenxingblog.site/categories/markdown/"},{"name":"FM4","slug":"FM4","permalink":"http://zhenxingblog.site/categories/FM4/"},{"name":"Unity3D","slug":"Unity3D","permalink":"http://zhenxingblog.site/categories/Unity3D/"},{"name":"Hardware","slug":"Hardware","permalink":"http://zhenxingblog.site/categories/Hardware/"},{"name":"单片机","slug":"单片机","permalink":"http://zhenxingblog.site/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"机器人学","slug":"机器人学","permalink":"http://zhenxingblog.site/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/"},{"name":"WEB前端开发","slug":"WEB前端开发","permalink":"http://zhenxingblog.site/categories/WEB%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"},{"name":"C#","slug":"C","permalink":"http://zhenxingblog.site/categories/C/"},{"name":"DotNet Core","slug":"DotNet-Core","permalink":"http://zhenxingblog.site/categories/DotNet-Core/"},{"name":"Hexo","slug":"Hexo","permalink":"http://zhenxingblog.site/categories/Hexo/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://zhenxingblog.site/tags/markdown/"},{"name":"ARM","slug":"ARM","permalink":"http://zhenxingblog.site/tags/ARM/"},{"name":"Cortex-M4","slug":"Cortex-M4","permalink":"http://zhenxingblog.site/tags/Cortex-M4/"},{"name":"3D","slug":"3D","permalink":"http://zhenxingblog.site/tags/3D/"},{"name":"物理引擎","slug":"物理引擎","permalink":"http://zhenxingblog.site/tags/%E7%89%A9%E7%90%86%E5%BC%95%E6%93%8E/"},{"name":"FBX模型动态加载","slug":"FBX模型动态加载","permalink":"http://zhenxingblog.site/tags/FBX%E6%A8%A1%E5%9E%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/"},{"name":"开关电源","slug":"开关电源","permalink":"http://zhenxingblog.site/tags/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"name":"Buck","slug":"Buck","permalink":"http://zhenxingblog.site/tags/Buck/"},{"name":"Boost","slug":"Boost","permalink":"http://zhenxingblog.site/tags/Boost/"},{"name":"ESP32","slug":"ESP32","permalink":"http://zhenxingblog.site/tags/ESP32/"},{"name":"LED","slug":"LED","permalink":"http://zhenxingblog.site/tags/LED/"},{"name":"机械臂","slug":"机械臂","permalink":"http://zhenxingblog.site/tags/%E6%9C%BA%E6%A2%B0%E8%87%82/"},{"name":"坐标变换","slug":"坐标变换","permalink":"http://zhenxingblog.site/tags/%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://zhenxingblog.site/tags/JavaScript/"},{"name":"MOSFET","slug":"MOSFET","permalink":"http://zhenxingblog.site/tags/MOSFET/"},{"name":"C#","slug":"C","permalink":"http://zhenxingblog.site/tags/C/"},{"name":"时间检测","slug":"时间检测","permalink":"http://zhenxingblog.site/tags/%E6%97%B6%E9%97%B4%E6%A3%80%E6%B5%8B/"},{"name":"线程锁","slug":"线程锁","permalink":"http://zhenxingblog.site/tags/%E7%BA%BF%E7%A8%8B%E9%94%81/"},{"name":"HTML","slug":"HTML","permalink":"http://zhenxingblog.site/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://zhenxingblog.site/tags/CSS/"},{"name":"WebApi","slug":"WebApi","permalink":"http://zhenxingblog.site/tags/WebApi/"},{"name":"EFCore","slug":"EFCore","permalink":"http://zhenxingblog.site/tags/EFCore/"},{"name":"Blog","slug":"Blog","permalink":"http://zhenxingblog.site/tags/Blog/"},{"name":"Interrupt","slug":"Interrupt","permalink":"http://zhenxingblog.site/tags/Interrupt/"},{"name":"ADC","slug":"ADC","permalink":"http://zhenxingblog.site/tags/ADC/"},{"name":"PWM","slug":"PWM","permalink":"http://zhenxingblog.site/tags/PWM/"},{"name":"Hexo","slug":"Hexo","permalink":"http://zhenxingblog.site/tags/Hexo/"},{"name":"插件","slug":"插件","permalink":"http://zhenxingblog.site/tags/%E6%8F%92%E4%BB%B6/"},{"name":"打印日志信息","slug":"打印日志信息","permalink":"http://zhenxingblog.site/tags/%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/"},{"name":"硬件","slug":"硬件","permalink":"http://zhenxingblog.site/tags/%E7%A1%AC%E4%BB%B6/"}]}